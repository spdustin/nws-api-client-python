"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from datetime import datetime
from enum import Enum
from nws_api_client import errors, models, utils
from nws_api_client._hooks import HookContext
from nws_api_client.types import OptionalNullable, UNSET
from nws_api_client.utils import get_security_from_env
from typing import List, Mapping, Optional, Union


class ListZonesAcceptEnum(str, Enum):
    APPLICATION_GEO_PLUS_JSON = "application/geo+json"
    APPLICATION_LD_PLUS_JSON = "application/ld+json"
    APPLICATION_PROBLEM_PLUS_JSON = "application/problem+json"


class ListZonesByTypeAcceptEnum(str, Enum):
    APPLICATION_GEO_PLUS_JSON = "application/geo+json"
    APPLICATION_LD_PLUS_JSON = "application/ld+json"
    APPLICATION_PROBLEM_PLUS_JSON = "application/problem+json"


class GetZoneMetadataAcceptEnum(str, Enum):
    APPLICATION_GEO_PLUS_JSON = "application/geo+json"
    APPLICATION_LD_PLUS_JSON = "application/ld+json"
    APPLICATION_PROBLEM_PLUS_JSON = "application/problem+json"


class GetZoneForecastAcceptEnum(str, Enum):
    APPLICATION_GEO_PLUS_JSON = "application/geo+json"
    APPLICATION_LD_PLUS_JSON = "application/ld+json"
    APPLICATION_PROBLEM_PLUS_JSON = "application/problem+json"


class ListObservationsByZoneAcceptEnum(str, Enum):
    APPLICATION_GEO_PLUS_JSON = "application/geo+json"
    APPLICATION_LD_PLUS_JSON = "application/ld+json"
    APPLICATION_PROBLEM_PLUS_JSON = "application/problem+json"


class ListObservationStationsByZoneAcceptEnum(str, Enum):
    APPLICATION_GEO_PLUS_JSON = "application/geo+json"
    APPLICATION_LD_PLUS_JSON = "application/ld+json"
    APPLICATION_PROBLEM_PLUS_JSON = "application/problem+json"


class Zones(BaseSDK):
    r"""Operations related to zones"""

    def list_zones(
        self,
        *,
        id: Optional[List[str]] = None,
        area: Optional[List[models.AreaCode]] = None,
        region: Optional[
            Union[List[models.RegionCode], List[models.RegionCodeTypedDict]]
        ] = None,
        type_: Optional[List[models.NWSZoneType]] = None,
        point: Optional[str] = None,
        include_geometry: Optional[bool] = None,
        limit: Optional[int] = None,
        effective: Optional[datetime] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[ListZonesAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListZonesResponse:
        r"""Returns a list of zones

        :param id: Zone ID (forecast or county)
        :param area: State/marine area code
        :param region: Region code
        :param type: Zone type
        :param point: Point (latitude,longitude)
        :param include_geometry: Include geometry in results (true/false)
        :param limit: Limit
        :param effective: Effective date/time
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListZonesRequest(
            id=id,
            area=area,
            region=region,
            type=type_,
            point=point,
            include_geometry=include_geometry,
            limit=limit,
            effective=effective,
        )

        req = self._build_request(
            method="GET",
            path="/zones",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="list_zones",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.ListZonesResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ZoneCollectionGeoJSON
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.ListZonesResponse(
                result=utils.unmarshal_json(http_res.text, models.ZoneCollectionJSONLd),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.ListZonesResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def list_zones_async(
        self,
        *,
        id: Optional[List[str]] = None,
        area: Optional[List[models.AreaCode]] = None,
        region: Optional[
            Union[List[models.RegionCode], List[models.RegionCodeTypedDict]]
        ] = None,
        type_: Optional[List[models.NWSZoneType]] = None,
        point: Optional[str] = None,
        include_geometry: Optional[bool] = None,
        limit: Optional[int] = None,
        effective: Optional[datetime] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[ListZonesAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListZonesResponse:
        r"""Returns a list of zones

        :param id: Zone ID (forecast or county)
        :param area: State/marine area code
        :param region: Region code
        :param type: Zone type
        :param point: Point (latitude,longitude)
        :param include_geometry: Include geometry in results (true/false)
        :param limit: Limit
        :param effective: Effective date/time
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListZonesRequest(
            id=id,
            area=area,
            region=region,
            type=type_,
            point=point,
            include_geometry=include_geometry,
            limit=limit,
            effective=effective,
        )

        req = self._build_request_async(
            method="GET",
            path="/zones",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=False,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="list_zones",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.ListZonesResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ZoneCollectionGeoJSON
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.ListZonesResponse(
                result=utils.unmarshal_json(http_res.text, models.ZoneCollectionJSONLd),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.ListZonesResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def list_zones_by_type(
        self,
        *,
        type_path_parameter: models.NWSZoneType,
        id: Optional[List[str]] = None,
        area: Optional[List[models.AreaCode]] = None,
        region: Optional[
            Union[List[models.RegionCode], List[models.RegionCodeTypedDict]]
        ] = None,
        type_query_parameter: Optional[List[models.NWSZoneType]] = None,
        point: Optional[str] = None,
        include_geometry: Optional[bool] = None,
        limit: Optional[int] = None,
        effective: Optional[datetime] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[ListZonesByTypeAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListZonesByTypeResponse:
        r"""Returns a list of zones of a given type

        :param type_path_parameter: Zone type
        :param id: Zone ID (forecast or county)
        :param area: State/marine area code
        :param region: Region code
        :param type_query_parameter: Zone type
        :param point: Point (latitude,longitude)
        :param include_geometry: Include geometry in results (true/false)
        :param limit: Limit
        :param effective: Effective date/time
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListZonesByTypeRequest(
            type_path_parameter=type_path_parameter,
            id=id,
            area=area,
            region=region,
            type_query_parameter=type_query_parameter,
            point=point,
            include_geometry=include_geometry,
            limit=limit,
            effective=effective,
        )

        req = self._build_request(
            method="GET",
            path="/zones/{type}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="list_zones_by_type",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.ListZonesByTypeResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ZoneCollectionGeoJSON
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.ListZonesByTypeResponse(
                result=utils.unmarshal_json(http_res.text, models.ZoneCollectionJSONLd),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.ListZonesByTypeResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def list_zones_by_type_async(
        self,
        *,
        type_path_parameter: models.NWSZoneType,
        id: Optional[List[str]] = None,
        area: Optional[List[models.AreaCode]] = None,
        region: Optional[
            Union[List[models.RegionCode], List[models.RegionCodeTypedDict]]
        ] = None,
        type_query_parameter: Optional[List[models.NWSZoneType]] = None,
        point: Optional[str] = None,
        include_geometry: Optional[bool] = None,
        limit: Optional[int] = None,
        effective: Optional[datetime] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[ListZonesByTypeAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListZonesByTypeResponse:
        r"""Returns a list of zones of a given type

        :param type_path_parameter: Zone type
        :param id: Zone ID (forecast or county)
        :param area: State/marine area code
        :param region: Region code
        :param type_query_parameter: Zone type
        :param point: Point (latitude,longitude)
        :param include_geometry: Include geometry in results (true/false)
        :param limit: Limit
        :param effective: Effective date/time
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListZonesByTypeRequest(
            type_path_parameter=type_path_parameter,
            id=id,
            area=area,
            region=region,
            type_query_parameter=type_query_parameter,
            point=point,
            include_geometry=include_geometry,
            limit=limit,
            effective=effective,
        )

        req = self._build_request_async(
            method="GET",
            path="/zones/{type}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="list_zones_by_type",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.ListZonesByTypeResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ZoneCollectionGeoJSON
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.ListZonesByTypeResponse(
                result=utils.unmarshal_json(http_res.text, models.ZoneCollectionJSONLd),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.ListZonesByTypeResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_zone_metadata(
        self,
        *,
        type_: models.NWSZoneType,
        zone_id: str,
        effective: Optional[datetime] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetZoneMetadataAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetZoneMetadataResponse:
        r"""Returns metadata about a given zone

        :param type: Zone type
        :param zone_id: NWS public zone/county identifier
        :param effective: Effective date/time
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetZoneMetadataRequest(
            type=type_,
            zone_id=zone_id,
            effective=effective,
        )

        req = self._build_request(
            method="GET",
            path="/zones/{type}/{zoneId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="get_zone_metadata",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.GetZoneMetadataResponse(
                result=utils.unmarshal_json(http_res.text, models.ZoneGeoJSON),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.GetZoneMetadataResponse(
                result=utils.unmarshal_json(http_res.text, models.Zone),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.GetZoneMetadataResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_zone_metadata_async(
        self,
        *,
        type_: models.NWSZoneType,
        zone_id: str,
        effective: Optional[datetime] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetZoneMetadataAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetZoneMetadataResponse:
        r"""Returns metadata about a given zone

        :param type: Zone type
        :param zone_id: NWS public zone/county identifier
        :param effective: Effective date/time
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetZoneMetadataRequest(
            type=type_,
            zone_id=zone_id,
            effective=effective,
        )

        req = self._build_request_async(
            method="GET",
            path="/zones/{type}/{zoneId}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="get_zone_metadata",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.GetZoneMetadataResponse(
                result=utils.unmarshal_json(http_res.text, models.ZoneGeoJSON),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.GetZoneMetadataResponse(
                result=utils.unmarshal_json(http_res.text, models.Zone),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.GetZoneMetadataResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_zone_forecast(
        self,
        *,
        type_: str,
        zone_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetZoneForecastAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetZoneForecastResponse:
        r"""Returns the current zone forecast for a given zone

        :param type: Zone type
        :param zone_id: NWS public zone/county identifier
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetZoneForecastRequest(
            type=type_,
            zone_id=zone_id,
        )

        req = self._build_request(
            method="GET",
            path="/zones/{type}/{zoneId}/forecast",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="get_zone_forecast",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.GetZoneForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.ZoneForecastGeoJSON),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.GetZoneForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.ZoneForecast),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.GetZoneForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_zone_forecast_async(
        self,
        *,
        type_: str,
        zone_id: str,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetZoneForecastAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetZoneForecastResponse:
        r"""Returns the current zone forecast for a given zone

        :param type: Zone type
        :param zone_id: NWS public zone/county identifier
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetZoneForecastRequest(
            type=type_,
            zone_id=zone_id,
        )

        req = self._build_request_async(
            method="GET",
            path="/zones/{type}/{zoneId}/forecast",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="get_zone_forecast",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.GetZoneForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.ZoneForecastGeoJSON),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.GetZoneForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.ZoneForecast),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.GetZoneForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def list_observations_by_zone(
        self,
        *,
        zone_id: str,
        start: Optional[datetime] = None,
        end: Optional[datetime] = None,
        limit: Optional[int] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[ListObservationsByZoneAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListObservationsByZoneResponse:
        r"""Returns a list of observations for a given zone

        :param zone_id: NWS public zone/county identifier
        :param start: Start date/time
        :param end: End date/time
        :param limit: Limit
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListObservationsByZoneRequest(
            zone_id=zone_id,
            start=start,
            end=end,
            limit=limit,
        )

        req = self._build_request(
            method="GET",
            path="/zones/forecast/{zoneId}/observations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="list_observations_by_zone",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.ListObservationsByZoneResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ObservationCollectionGeoJSON
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.ListObservationsByZoneResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ObservationCollectionJSONLd
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.ListObservationsByZoneResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def list_observations_by_zone_async(
        self,
        *,
        zone_id: str,
        start: Optional[datetime] = None,
        end: Optional[datetime] = None,
        limit: Optional[int] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[ListObservationsByZoneAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListObservationsByZoneResponse:
        r"""Returns a list of observations for a given zone

        :param zone_id: NWS public zone/county identifier
        :param start: Start date/time
        :param end: End date/time
        :param limit: Limit
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListObservationsByZoneRequest(
            zone_id=zone_id,
            start=start,
            end=end,
            limit=limit,
        )

        req = self._build_request_async(
            method="GET",
            path="/zones/forecast/{zoneId}/observations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="list_observations_by_zone",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.ListObservationsByZoneResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ObservationCollectionGeoJSON
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.ListObservationsByZoneResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ObservationCollectionJSONLd
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.ListObservationsByZoneResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def list_observation_stations_by_zone(
        self,
        *,
        zone_id: str,
        limit: Optional[int] = 500,
        cursor: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[
            ListObservationStationsByZoneAcceptEnum
        ] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListObservationStationsByZoneResponse:
        r"""Returns a list of observation stations for a given zone

        :param zone_id: NWS public zone/county identifier
        :param limit: Limit
        :param cursor: Pagination cursor
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListObservationStationsByZoneRequest(
            zone_id=zone_id,
            limit=limit,
            cursor=cursor,
        )

        req = self._build_request(
            method="GET",
            path="/zones/forecast/{zoneId}/stations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="list_observation_stations_by_zone",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.ListObservationStationsByZoneResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ObservationStationCollectionGeoJSON
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.ListObservationStationsByZoneResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ObservationStationCollectionJSONLd
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.ListObservationStationsByZoneResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def list_observation_stations_by_zone_async(
        self,
        *,
        zone_id: str,
        limit: Optional[int] = 500,
        cursor: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[
            ListObservationStationsByZoneAcceptEnum
        ] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListObservationStationsByZoneResponse:
        r"""Returns a list of observation stations for a given zone

        :param zone_id: NWS public zone/county identifier
        :param limit: Limit
        :param cursor: Pagination cursor
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListObservationStationsByZoneRequest(
            zone_id=zone_id,
            limit=limit,
            cursor=cursor,
        )

        req = self._build_request_async(
            method="GET",
            path="/zones/forecast/{zoneId}/stations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="list_observation_stations_by_zone",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.ListObservationStationsByZoneResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ObservationStationCollectionGeoJSON
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.ListObservationStationsByZoneResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ObservationStationCollectionJSONLd
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.ListObservationStationsByZoneResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
