"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from .basesdk import BaseSDK
from enum import Enum
from nws_api_client import errors, models, utils
from nws_api_client._hooks import HookContext
from nws_api_client.types import OptionalNullable, UNSET
from nws_api_client.utils import get_security_from_env
from typing import List, Mapping, Optional


class GetGridpointRawForecastAcceptEnum(str, Enum):
    APPLICATION_GEO_PLUS_JSON = "application/geo+json"
    APPLICATION_LD_PLUS_JSON = "application/ld+json"
    APPLICATION_PROBLEM_PLUS_JSON = "application/problem+json"


class GetGridpointForecastAcceptEnum(str, Enum):
    APPLICATION_GEO_PLUS_JSON = "application/geo+json"
    APPLICATION_LD_PLUS_JSON = "application/ld+json"
    APPLICATION_PROBLEM_PLUS_JSON = "application/problem+json"
    APPLICATION_VND_NOAA_DWML_PLUS_XML = "application/vnd.noaa.dwml+xml"


class GetGridpointHourlyForecastAcceptEnum(str, Enum):
    APPLICATION_GEO_PLUS_JSON = "application/geo+json"
    APPLICATION_LD_PLUS_JSON = "application/ld+json"
    APPLICATION_PROBLEM_PLUS_JSON = "application/problem+json"
    APPLICATION_VND_NOAA_DWML_PLUS_XML = "application/vnd.noaa.dwml+xml"


class ListObservationStationsByGridpointAcceptEnum(str, Enum):
    APPLICATION_GEO_PLUS_JSON = "application/geo+json"
    APPLICATION_LD_PLUS_JSON = "application/ld+json"
    APPLICATION_PROBLEM_PLUS_JSON = "application/problem+json"


class Gridpoints(BaseSDK):
    r"""Operations related to gridpoints (X,Y)"""

    def get_gridpoint_raw_forecast(
        self,
        *,
        wfo: models.NWSForecastOfficeID,
        point: List[int],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetGridpointRawForecastAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetGridpointRawForecastResponse:
        r"""Returns raw numerical forecast data for a 2.5km grid area

        :param wfo: Forecast office ID
        :param point: Two-element array encoding grid X and Y (comma-separated)
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetGridpointRawForecastRequest(
            wfo=wfo,
            point=point,
        )

        req = self._build_request(
            method="GET",
            path="/gridpoints/{wfo}/{point}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="get_gridpoint_raw_forecast",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.GetGridpointRawForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.GridpointGeoJSON),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.GetGridpointRawForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.Gridpoint),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.GetGridpointRawForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_gridpoint_raw_forecast_async(
        self,
        *,
        wfo: models.NWSForecastOfficeID,
        point: List[int],
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetGridpointRawForecastAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetGridpointRawForecastResponse:
        r"""Returns raw numerical forecast data for a 2.5km grid area

        :param wfo: Forecast office ID
        :param point: Two-element array encoding grid X and Y (comma-separated)
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetGridpointRawForecastRequest(
            wfo=wfo,
            point=point,
        )

        req = self._build_request_async(
            method="GET",
            path="/gridpoints/{wfo}/{point}",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="get_gridpoint_raw_forecast",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.GetGridpointRawForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.GridpointGeoJSON),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.GetGridpointRawForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.Gridpoint),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.GetGridpointRawForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_gridpoint_forecast(
        self,
        *,
        wfo: models.NWSForecastOfficeID,
        point: List[int],
        feature_flags: Optional[List[models.GridpointForecastFeatureFlags]] = None,
        units: Optional[
            models.GridpointForecastUnits
        ] = models.GridpointForecastUnits.US,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetGridpointForecastAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetGridpointForecastResponse:
        r"""Returns a textual forecast for a 2.5km grid area

        :param wfo: Forecast office ID
        :param point: Two-element array encoding grid X and Y (comma-separated)
        :param feature_flags: Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue
        :param units: Use US customary or SI (metric) units in textual output
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetGridpointForecastRequest(
            wfo=wfo,
            point=point,
            feature_flags=feature_flags,
            units=units,
        )

        req = self._build_request(
            method="GET",
            path="/gridpoints/{wfo}/{point}/forecast",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.8, application/problem+json;q=0.5, application/vnd.noaa.dwml+xml;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="get_gridpoint_forecast",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.GetGridpointForecastResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.GridpointForecastGeoJSON
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.GetGridpointForecastResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.GridpointForecastJSONLd
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/vnd.noaa.dwml+xml"):
            http_res_bytes = utils.stream_to_bytes(http_res)
            return models.GetGridpointForecastResponse(
                result=http_res_bytes,
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.GetGridpointForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_gridpoint_forecast_async(
        self,
        *,
        wfo: models.NWSForecastOfficeID,
        point: List[int],
        feature_flags: Optional[List[models.GridpointForecastFeatureFlags]] = None,
        units: Optional[
            models.GridpointForecastUnits
        ] = models.GridpointForecastUnits.US,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetGridpointForecastAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetGridpointForecastResponse:
        r"""Returns a textual forecast for a 2.5km grid area

        :param wfo: Forecast office ID
        :param point: Two-element array encoding grid X and Y (comma-separated)
        :param feature_flags: Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue
        :param units: Use US customary or SI (metric) units in textual output
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetGridpointForecastRequest(
            wfo=wfo,
            point=point,
            feature_flags=feature_flags,
            units=units,
        )

        req = self._build_request_async(
            method="GET",
            path="/gridpoints/{wfo}/{point}/forecast",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.8, application/problem+json;q=0.5, application/vnd.noaa.dwml+xml;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="get_gridpoint_forecast",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.GetGridpointForecastResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.GridpointForecastGeoJSON
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.GetGridpointForecastResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.GridpointForecastJSONLd
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/vnd.noaa.dwml+xml"):
            http_res_bytes = await utils.stream_to_bytes_async(http_res)
            return models.GetGridpointForecastResponse(
                result=http_res_bytes,
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.GetGridpointForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def get_gridpoint_hourly_forecast(
        self,
        *,
        wfo: models.NWSForecastOfficeID,
        point: List[int],
        feature_flags: Optional[List[models.GridpointForecastFeatureFlags]] = None,
        units: Optional[
            models.GridpointForecastUnits
        ] = models.GridpointForecastUnits.US,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetGridpointHourlyForecastAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetGridpointHourlyForecastResponse:
        r"""Returns a textual hourly forecast for a 2.5km grid area

        :param wfo: Forecast office ID
        :param point: Two-element array encoding grid X and Y (comma-separated)
        :param feature_flags: Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue
        :param units: Use US customary or SI (metric) units in textual output
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetGridpointHourlyForecastRequest(
            wfo=wfo,
            point=point,
            feature_flags=feature_flags,
            units=units,
        )

        req = self._build_request(
            method="GET",
            path="/gridpoints/{wfo}/{point}/forecast/hourly",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.8, application/problem+json;q=0.5, application/vnd.noaa.dwml+xml;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="get_gridpoint_hourly_forecast",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.GetGridpointHourlyForecastResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.GridpointForecastGeoJSON
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.GetGridpointHourlyForecastResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.GridpointForecastJSONLd
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/vnd.noaa.dwml+xml"):
            http_res_bytes = utils.stream_to_bytes(http_res)
            return models.GetGridpointHourlyForecastResponse(
                result=http_res_bytes,
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.GetGridpointHourlyForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def get_gridpoint_hourly_forecast_async(
        self,
        *,
        wfo: models.NWSForecastOfficeID,
        point: List[int],
        feature_flags: Optional[List[models.GridpointForecastFeatureFlags]] = None,
        units: Optional[
            models.GridpointForecastUnits
        ] = models.GridpointForecastUnits.US,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[GetGridpointHourlyForecastAcceptEnum] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.GetGridpointHourlyForecastResponse:
        r"""Returns a textual hourly forecast for a 2.5km grid area

        :param wfo: Forecast office ID
        :param point: Two-element array encoding grid X and Y (comma-separated)
        :param feature_flags: Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue
        :param units: Use US customary or SI (metric) units in textual output
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.GetGridpointHourlyForecastRequest(
            wfo=wfo,
            point=point,
            feature_flags=feature_flags,
            units=units,
        )

        req = self._build_request_async(
            method="GET",
            path="/gridpoints/{wfo}/{point}/forecast/hourly",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.8, application/problem+json;q=0.5, application/vnd.noaa.dwml+xml;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="get_gridpoint_hourly_forecast",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.GetGridpointHourlyForecastResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.GridpointForecastGeoJSON
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.GetGridpointHourlyForecastResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.GridpointForecastJSONLd
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/vnd.noaa.dwml+xml"):
            http_res_bytes = await utils.stream_to_bytes_async(http_res)
            return models.GetGridpointHourlyForecastResponse(
                result=http_res_bytes,
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.GetGridpointHourlyForecastResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    def list_observation_stations_by_gridpoint(
        self,
        *,
        wfo: models.NWSForecastOfficeID,
        point: List[int],
        limit: Optional[int] = 500,
        cursor: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[
            ListObservationStationsByGridpointAcceptEnum
        ] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListObservationStationsByGridpointResponse:
        r"""Returns a list of observation stations usable for a given 2.5km grid area

        :param wfo: Forecast office ID
        :param point: Two-element array encoding grid X and Y (comma-separated)
        :param limit: Limit
        :param cursor: Pagination cursor
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListObservationStationsByGridpointRequest(
            wfo=wfo,
            point=point,
            limit=limit,
            cursor=cursor,
        )

        req = self._build_request(
            method="GET",
            path="/gridpoints/{wfo}/{point}/stations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = self.do_request(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="list_observation_stations_by_gridpoint",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.ListObservationStationsByGridpointResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ObservationStationCollectionGeoJSON
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.ListObservationStationsByGridpointResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ObservationStationCollectionJSONLd
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = utils.stream_to_text(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.ListObservationStationsByGridpointResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = utils.stream_to_text(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )

    async def list_observation_stations_by_gridpoint_async(
        self,
        *,
        wfo: models.NWSForecastOfficeID,
        point: List[int],
        limit: Optional[int] = 500,
        cursor: Optional[str] = None,
        retries: OptionalNullable[utils.RetryConfig] = UNSET,
        server_url: Optional[str] = None,
        timeout_ms: Optional[int] = None,
        accept_header_override: Optional[
            ListObservationStationsByGridpointAcceptEnum
        ] = None,
        http_headers: Optional[Mapping[str, str]] = None,
    ) -> models.ListObservationStationsByGridpointResponse:
        r"""Returns a list of observation stations usable for a given 2.5km grid area

        :param wfo: Forecast office ID
        :param point: Two-element array encoding grid X and Y (comma-separated)
        :param limit: Limit
        :param cursor: Pagination cursor
        :param retries: Override the default retry configuration for this method
        :param server_url: Override the default server URL for this method
        :param timeout_ms: Override the default request timeout configuration for this method in milliseconds
        :param accept_header_override: Override the default accept header for this method
        :param http_headers: Additional headers to set or replace on requests.
        """
        base_url = None
        url_variables = None
        if timeout_ms is None:
            timeout_ms = self.sdk_configuration.timeout_ms

        if server_url is not None:
            base_url = server_url
        else:
            base_url = self._get_url(base_url, url_variables)

        request = models.ListObservationStationsByGridpointRequest(
            wfo=wfo,
            point=point,
            limit=limit,
            cursor=cursor,
        )

        req = self._build_request_async(
            method="GET",
            path="/gridpoints/{wfo}/{point}/stations",
            base_url=base_url,
            url_variables=url_variables,
            request=request,
            request_body_required=False,
            request_has_path_params=True,
            request_has_query_params=True,
            user_agent_header="user-agent",
            accept_header_value=accept_header_override.value
            if accept_header_override is not None
            else "application/geo+json;q=1, application/ld+json;q=0.7, application/problem+json;q=0",
            http_headers=http_headers,
            security=self.sdk_configuration.security,
            timeout_ms=timeout_ms,
        )

        if retries == UNSET:
            if self.sdk_configuration.retry_config is not UNSET:
                retries = self.sdk_configuration.retry_config

        retry_config = None
        if isinstance(retries, utils.RetryConfig):
            retry_config = (retries, ["429", "500", "502", "503", "504"])

        http_res = await self.do_request_async(
            hook_ctx=HookContext(
                base_url=base_url or "",
                operation_id="list_observation_stations_by_gridpoint",
                oauth2_scopes=[],
                security_source=get_security_from_env(
                    self.sdk_configuration.security, models.Security
                ),
            ),
            request=req,
            error_status_codes=["4XX", "5XX"],
            retry_config=retry_config,
        )

        if utils.match_response(http_res, "200", "application/geo+json"):
            return models.ListObservationStationsByGridpointResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ObservationStationCollectionGeoJSON
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "200", "application/ld+json"):
            return models.ListObservationStationsByGridpointResponse(
                result=utils.unmarshal_json(
                    http_res.text, models.ObservationStationCollectionJSONLd
                ),
                headers=utils.get_response_headers(http_res.headers),
            )
        if utils.match_response(http_res, "4XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "5XX", "*"):
            http_res_text = await utils.stream_to_text_async(http_res)
            raise errors.APIError(
                "API error occurred", http_res.status_code, http_res_text, http_res
            )
        if utils.match_response(http_res, "default", "application/problem+json"):
            return models.ListObservationStationsByGridpointResponse(
                result=utils.unmarshal_json(http_res.text, models.ProblemDetail),
                headers=utils.get_response_headers(http_res.headers),
            )

        content_type = http_res.headers.get("Content-Type")
        http_res_text = await utils.stream_to_text_async(http_res)
        raise errors.APIError(
            f"Unexpected response received (code: {http_res.status_code}, type: {content_type})",
            http_res.status_code,
            http_res_text,
            http_res,
        )
