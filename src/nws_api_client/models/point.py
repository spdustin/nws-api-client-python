"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .jsonldcontext_union import JSONLdContextUnion, JSONLdContextUnionTypedDict
from .nwsforecastofficeid import NWSForecastOfficeID
from .relativelocationgeojson import (
    RelativeLocationGeoJSON,
    RelativeLocationGeoJSONTypedDict,
)
from .relativelocationjsonld import (
    RelativeLocationJSONLd,
    RelativeLocationJSONLdTypedDict,
)
from enum import Enum
from nws_api_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class PointAtType(str, Enum):
    WX_POINT = "wx:Point"


PointRelativeLocationTypedDict = TypeAliasType(
    "PointRelativeLocationTypedDict",
    Union[RelativeLocationGeoJSONTypedDict, RelativeLocationJSONLdTypedDict],
)


PointRelativeLocation = TypeAliasType(
    "PointRelativeLocation", Union[RelativeLocationGeoJSON, RelativeLocationJSONLd]
)


class PointTypedDict(TypedDict):
    at_context: NotRequired[JSONLdContextUnionTypedDict]
    geometry: NotRequired[Nullable[str]]
    r"""A geometry represented in Well-Known Text (WKT) format."""
    at_id: NotRequired[str]
    at_type: NotRequired[PointAtType]
    cwa: NotRequired[NWSForecastOfficeID]
    r"""Three-letter identifier for a NWS office."""
    forecast_office: NotRequired[str]
    grid_id: NotRequired[NWSForecastOfficeID]
    r"""Three-letter identifier for a NWS office."""
    grid_x: NotRequired[int]
    grid_y: NotRequired[int]
    forecast: NotRequired[str]
    forecast_hourly: NotRequired[str]
    forecast_grid_data: NotRequired[str]
    observation_stations: NotRequired[str]
    relative_location: NotRequired[PointRelativeLocationTypedDict]
    forecast_zone: NotRequired[str]
    county: NotRequired[str]
    fire_weather_zone: NotRequired[str]
    time_zone: NotRequired[str]
    radar_station: NotRequired[str]


class Point(BaseModel):
    at_context: Annotated[
        Optional[JSONLdContextUnion], pydantic.Field(alias="@context")
    ] = None

    geometry: OptionalNullable[str] = UNSET
    r"""A geometry represented in Well-Known Text (WKT) format."""

    at_id: Annotated[Optional[str], pydantic.Field(alias="@id")] = None

    at_type: Annotated[Optional[PointAtType], pydantic.Field(alias="@type")] = None

    cwa: Optional[NWSForecastOfficeID] = None
    r"""Three-letter identifier for a NWS office."""

    forecast_office: Annotated[
        Optional[str], pydantic.Field(alias="forecastOffice")
    ] = None

    grid_id: Annotated[
        Optional[NWSForecastOfficeID], pydantic.Field(alias="gridId")
    ] = None
    r"""Three-letter identifier for a NWS office."""

    grid_x: Annotated[Optional[int], pydantic.Field(alias="gridX")] = None

    grid_y: Annotated[Optional[int], pydantic.Field(alias="gridY")] = None

    forecast: Optional[str] = None

    forecast_hourly: Annotated[
        Optional[str], pydantic.Field(alias="forecastHourly")
    ] = None

    forecast_grid_data: Annotated[
        Optional[str], pydantic.Field(alias="forecastGridData")
    ] = None

    observation_stations: Annotated[
        Optional[str], pydantic.Field(alias="observationStations")
    ] = None

    relative_location: Annotated[
        Optional[PointRelativeLocation], pydantic.Field(alias="relativeLocation")
    ] = None

    forecast_zone: Annotated[Optional[str], pydantic.Field(alias="forecastZone")] = None

    county: Optional[str] = None

    fire_weather_zone: Annotated[
        Optional[str], pydantic.Field(alias="fireWeatherZone")
    ] = None

    time_zone: Annotated[Optional[str], pydantic.Field(alias="timeZone")] = None

    radar_station: Annotated[Optional[str], pydantic.Field(alias="radarStation")] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "@context",
            "geometry",
            "@id",
            "@type",
            "cwa",
            "forecastOffice",
            "gridId",
            "gridX",
            "gridY",
            "forecast",
            "forecastHourly",
            "forecastGridData",
            "observationStations",
            "relativeLocation",
            "forecastZone",
            "county",
            "fireWeatherZone",
            "timeZone",
            "radarStation",
        ]
        nullable_fields = ["geometry"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
