"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .gridpoint import Gridpoint, GridpointTypedDict
from .gridpointgeojson import GridpointGeoJSON, GridpointGeoJSONTypedDict
from .nwsforecastofficeid import NWSForecastOfficeID
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from nws_api_client.types import BaseModel
from nws_api_client.utils import FieldMetadata, PathParamMetadata
from typing import Dict, List, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class GridpointRequestTypedDict(TypedDict):
    wfo: NWSForecastOfficeID
    r"""Forecast office ID"""
    point: List[int]
    r"""Two-element array encoding grid X and Y (comma-separated)"""


class GridpointRequest(BaseModel):
    wfo: Annotated[
        NWSForecastOfficeID,
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Forecast office ID"""

    point: Annotated[
        List[int], FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Two-element array encoding grid X and Y (comma-separated)"""


GridpointResponseResultTypedDict = TypeAliasType(
    "GridpointResponseResultTypedDict",
    Union[GridpointGeoJSONTypedDict, ProblemDetailTypedDict, GridpointTypedDict],
)


GridpointResponseResult = TypeAliasType(
    "GridpointResponseResult", Union[GridpointGeoJSON, ProblemDetail, Gridpoint]
)


class GridpointResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: GridpointResponseResultTypedDict


class GridpointResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: GridpointResponseResult
