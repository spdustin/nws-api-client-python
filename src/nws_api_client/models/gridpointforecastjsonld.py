"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .gridpointforecastperiod import (
    GridpointForecastPeriod,
    GridpointForecastPeriodTypedDict,
)
from .gridpointforecastunits import GridpointForecastUnits
from .jsonldcontext_union import JSONLdContextUnion, JSONLdContextUnionTypedDict
from .quantitativevalue import QuantitativeValue, QuantitativeValueTypedDict
from datetime import datetime
from nws_api_client.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GridpointForecastJSONLdTypedDict(TypedDict):
    r"""A multi-day forecast for a 2.5km grid square."""

    at_context: JSONLdContextUnionTypedDict
    geometry: Nullable[str]
    r"""A geometry represented in Well-Known Text (WKT) format."""
    units: NotRequired[GridpointForecastUnits]
    r"""Denotes the units used in the textual portions of the forecast."""
    forecast_generator: NotRequired[str]
    r"""The internal generator class used to create the forecast text (used for NWS debugging)."""
    generated_at: NotRequired[datetime]
    r"""The time this forecast data was generated."""
    update_time: NotRequired[datetime]
    r"""The last update time of the data this forecast was generated from."""
    valid_times: NotRequired[str]
    r"""A time interval in ISO 8601 format. This can be one of:

    1. Start and end time
    2. Start time and duration
    3. Duration and end time
    The string \"NOW\" can also be used in place of a start/end time.

    """
    elevation: NotRequired[QuantitativeValueTypedDict]
    r"""A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue

    """
    periods: NotRequired[List[GridpointForecastPeriodTypedDict]]
    r"""An array of forecast periods."""


class GridpointForecastJSONLd(BaseModel):
    r"""A multi-day forecast for a 2.5km grid square."""

    at_context: Annotated[JSONLdContextUnion, pydantic.Field(alias="@context")]

    geometry: Nullable[str]
    r"""A geometry represented in Well-Known Text (WKT) format."""

    units: Optional[GridpointForecastUnits] = GridpointForecastUnits.US
    r"""Denotes the units used in the textual portions of the forecast."""

    forecast_generator: Annotated[
        Optional[str], pydantic.Field(alias="forecastGenerator")
    ] = None
    r"""The internal generator class used to create the forecast text (used for NWS debugging)."""

    generated_at: Annotated[Optional[datetime], pydantic.Field(alias="generatedAt")] = (
        None
    )
    r"""The time this forecast data was generated."""

    update_time: Annotated[Optional[datetime], pydantic.Field(alias="updateTime")] = (
        None
    )
    r"""The last update time of the data this forecast was generated from."""

    valid_times: Annotated[Optional[str], pydantic.Field(alias="validTimes")] = None
    r"""A time interval in ISO 8601 format. This can be one of:

    1. Start and end time
    2. Start time and duration
    3. Duration and end time
    The string \"NOW\" can also be used in place of a start/end time.

    """

    elevation: Optional[QuantitativeValue] = None
    r"""A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue

    """

    periods: Optional[List[GridpointForecastPeriod]] = None
    r"""An array of forecast periods."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "units",
            "forecastGenerator",
            "generatedAt",
            "updateTime",
            "validTimes",
            "elevation",
            "periods",
        ]
        nullable_fields = ["geometry"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
