"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from nws_api_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class SigmetTypedDict(TypedDict):
    id: NotRequired[str]
    issue_time: NotRequired[datetime]
    fir: NotRequired[Nullable[str]]
    atsu: NotRequired[str]
    r"""ATSU Identifier"""
    sequence: NotRequired[Nullable[str]]
    phenomenon: NotRequired[Nullable[str]]
    start: NotRequired[datetime]
    end: NotRequired[datetime]


class Sigmet(BaseModel):
    id: Optional[str] = None

    issue_time: Annotated[Optional[datetime], pydantic.Field(alias="issueTime")] = None

    fir: OptionalNullable[str] = UNSET

    atsu: Optional[str] = None
    r"""ATSU Identifier"""

    sequence: OptionalNullable[str] = UNSET

    phenomenon: OptionalNullable[str] = UNSET

    start: Optional[datetime] = None

    end: Optional[datetime] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "id",
            "issueTime",
            "fir",
            "atsu",
            "sequence",
            "phenomenon",
            "start",
            "end",
        ]
        nullable_fields = ["fir", "sequence", "phenomenon"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
