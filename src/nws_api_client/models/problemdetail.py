"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from nws_api_client.types import BaseModel
import pydantic
from pydantic import ConfigDict
from typing import Any, Dict, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ProblemDetailTypedDict(TypedDict):
    r"""Detail about an error. This document conforms to RFC 7807 (Problem Details for HTTP APIs)."""

    correlation_id: str
    r"""A unique identifier for the request, used for NWS debugging purposes. Please include this identifier with any correspondence to help us investigate your issue.

    """
    detail: str
    r"""A human-readable explanation specific to this occurrence of the problem."""
    instance: str
    r"""A URI reference (RFC 3986) that identifies the specific occurrence of the problem. This is only an identifier and is not necessarily a resolvable URL.

    """
    status: float
    r"""The HTTP status code (RFC 7231, Section 6) generated by the origin server for this occurrence of the problem.

    """
    title: str
    r"""A short, human-readable summary of the problem type."""
    type: NotRequired[str]
    r"""A URI reference (RFC 3986) that identifies the problem type. This is only an identifier and is not necessarily a resolvable URL.

    """


class ProblemDetail(BaseModel):
    r"""Detail about an error. This document conforms to RFC 7807 (Problem Details for HTTP APIs)."""

    model_config = ConfigDict(
        populate_by_name=True, arbitrary_types_allowed=True, extra="allow"
    )
    __pydantic_extra__: Dict[str, Any] = pydantic.Field(init=False)

    correlation_id: Annotated[str, pydantic.Field(alias="correlationId")]
    r"""A unique identifier for the request, used for NWS debugging purposes. Please include this identifier with any correspondence to help us investigate your issue.

    """

    detail: str
    r"""A human-readable explanation specific to this occurrence of the problem."""

    instance: str
    r"""A URI reference (RFC 3986) that identifies the specific occurrence of the problem. This is only an identifier and is not necessarily a resolvable URL.

    """

    status: float
    r"""The HTTP status code (RFC 7231, Section 6) generated by the origin server for this occurrence of the problem.

    """

    title: str
    r"""A short, human-readable summary of the problem type."""

    type: Optional[str] = "about:blank"
    r"""A URI reference (RFC 3986) that identifies the problem type. This is only an identifier and is not necessarily a resolvable URL.

    """

    @property
    def additional_properties(self):
        return self.__pydantic_extra__

    @additional_properties.setter
    def additional_properties(self, value):
        self.__pydantic_extra__ = value  # pyright: ignore[reportIncompatibleVariableOverride]
