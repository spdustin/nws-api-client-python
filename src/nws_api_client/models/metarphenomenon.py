"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from enum import Enum
from nws_api_client.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class MetarPhenomenonIntensity(str, Enum):
    LIGHT = "light"
    HEAVY = "heavy"


class Modifier(str, Enum):
    PATCHES = "patches"
    BLOWING = "blowing"
    LOW_DRIFTING = "low_drifting"
    FREEZING = "freezing"
    SHALLOW = "shallow"
    PARTIAL = "partial"
    SHOWERS = "showers"


class MetarPhenomenonWeather(str, Enum):
    FOG_MIST = "fog_mist"
    DUST_STORM = "dust_storm"
    DUST = "dust"
    DRIZZLE = "drizzle"
    FUNNEL_CLOUD = "funnel_cloud"
    FOG = "fog"
    SMOKE = "smoke"
    HAIL = "hail"
    SNOW_PELLETS = "snow_pellets"
    HAZE = "haze"
    ICE_CRYSTALS = "ice_crystals"
    ICE_PELLETS = "ice_pellets"
    DUST_WHIRLS = "dust_whirls"
    SPRAY = "spray"
    RAIN = "rain"
    SAND = "sand"
    SNOW_GRAINS = "snow_grains"
    SNOW = "snow"
    SQUALLS = "squalls"
    SAND_STORM = "sand_storm"
    THUNDERSTORMS = "thunderstorms"
    UNKNOWN = "unknown"
    VOLCANIC_ASH = "volcanic_ash"


class MetarPhenomenonTypedDict(TypedDict):
    r"""An object representing a decoded METAR phenomenon string."""

    intensity: Nullable[MetarPhenomenonIntensity]
    modifier: Nullable[Modifier]
    weather: MetarPhenomenonWeather
    raw_string: str
    in_vicinity: NotRequired[bool]


class MetarPhenomenon(BaseModel):
    r"""An object representing a decoded METAR phenomenon string."""

    intensity: Nullable[MetarPhenomenonIntensity]

    modifier: Nullable[Modifier]

    weather: MetarPhenomenonWeather

    raw_string: Annotated[str, pydantic.Field(alias="rawString")]

    in_vicinity: Annotated[Optional[bool], pydantic.Field(alias="inVicinity")] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["inVicinity"]
        nullable_fields = ["intensity", "modifier"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
