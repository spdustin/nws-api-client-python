"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .areacode import AreaCode
from .nwszonetype import NWSZoneType
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from .regioncode import RegionCode, RegionCodeTypedDict
from .zonecollectiongeojson import ZoneCollectionGeoJSON, ZoneCollectionGeoJSONTypedDict
from .zonecollectionjsonld import ZoneCollectionJSONLd, ZoneCollectionJSONLdTypedDict
from datetime import datetime
from nws_api_client.types import BaseModel
from nws_api_client.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class ZoneListTypeRequestTypedDict(TypedDict):
    type_path_parameter: NWSZoneType
    r"""Zone type"""
    id: NotRequired[List[str]]
    r"""Zone ID (forecast or county)"""
    area: NotRequired[List[AreaCode]]
    r"""State/marine area code"""
    region: NotRequired[List[RegionCodeTypedDict]]
    r"""Region code"""
    type_query_parameter: NotRequired[List[NWSZoneType]]
    r"""Zone type"""
    point: NotRequired[str]
    r"""Point (latitude,longitude)"""
    include_geometry: NotRequired[bool]
    r"""Include geometry in results (true/false)"""
    limit: NotRequired[int]
    r"""Limit"""
    effective: NotRequired[datetime]
    r"""Effective date/time"""


class ZoneListTypeRequest(BaseModel):
    type_path_parameter: Annotated[
        NWSZoneType,
        pydantic.Field(alias="type"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Zone type"""

    id: Annotated[
        Optional[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Zone ID (forecast or county)"""

    area: Annotated[
        Optional[List[AreaCode]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""State/marine area code"""

    region: Annotated[
        Optional[List[RegionCode]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Region code"""

    type_query_parameter: Annotated[
        Optional[List[NWSZoneType]],
        pydantic.Field(alias="type"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Zone type"""

    point: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Point (latitude,longitude)"""

    include_geometry: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Include geometry in results (true/false)"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Limit"""

    effective: Annotated[
        Optional[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Effective date/time"""


ZoneListTypeResponseResultTypedDict = TypeAliasType(
    "ZoneListTypeResponseResultTypedDict",
    Union[
        ZoneCollectionJSONLdTypedDict,
        ZoneCollectionGeoJSONTypedDict,
        ProblemDetailTypedDict,
    ],
)


ZoneListTypeResponseResult = TypeAliasType(
    "ZoneListTypeResponseResult",
    Union[ZoneCollectionJSONLd, ZoneCollectionGeoJSON, ProblemDetail],
)


class ZoneListTypeResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: ZoneListTypeResponseResultTypedDict


class ZoneListTypeResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: ZoneListTypeResponseResult
