"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from nws_api_client.types import BaseModel
import pydantic
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class AlertsTypesResponseBodyTypedDict(TypedDict):
    r"""A list of recognized event types"""

    event_types: NotRequired[List[str]]
    r"""A list of recognized event types"""


class AlertsTypesResponseBody(BaseModel):
    r"""A list of recognized event types"""

    event_types: Annotated[Optional[List[str]], pydantic.Field(alias="eventTypes")] = (
        None
    )
    r"""A list of recognized event types"""


AlertsTypesResponseResultTypedDict = TypeAliasType(
    "AlertsTypesResponseResultTypedDict",
    Union[AlertsTypesResponseBodyTypedDict, ProblemDetailTypedDict],
)


AlertsTypesResponseResult = TypeAliasType(
    "AlertsTypesResponseResult", Union[AlertsTypesResponseBody, ProblemDetail]
)


class AlertsTypesResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: AlertsTypesResponseResultTypedDict


class AlertsTypesResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: AlertsTypesResponseResult
