"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from .zoneforecast import ZoneForecast, ZoneForecastTypedDict
from .zoneforecastgeojson import ZoneForecastGeoJSON, ZoneForecastGeoJSONTypedDict
from nws_api_client.types import BaseModel
from nws_api_client.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import Dict, List, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class ZoneForecastRequestTypedDict(TypedDict):
    type: str
    r"""Zone type"""
    zone_id: str
    r"""NWS public zone/county identifier"""


class ZoneForecastRequest(BaseModel):
    type: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Zone type"""

    zone_id: Annotated[
        str,
        pydantic.Field(alias="zoneId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""NWS public zone/county identifier"""


ZoneForecastResponseResultTypedDict = TypeAliasType(
    "ZoneForecastResponseResultTypedDict",
    Union[ZoneForecastGeoJSONTypedDict, ZoneForecastTypedDict, ProblemDetailTypedDict],
)


ZoneForecastResponseResult = TypeAliasType(
    "ZoneForecastResponseResult",
    Union[ZoneForecastGeoJSON, ZoneForecast, ProblemDetail],
)


class ZoneForecastResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: ZoneForecastResponseResultTypedDict


class ZoneForecastResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: ZoneForecastResponseResult
