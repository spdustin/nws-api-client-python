"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .geojsongeometry import GeoJSONGeometry, GeoJSONGeometryTypedDict
from .gridpoint import Gridpoint, GridpointTypedDict
from .jsonldcontext_union import JSONLdContextUnion, JSONLdContextUnionTypedDict
from enum import Enum
from nws_api_client.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class GridpointGeoJSONType(str, Enum):
    FEATURE = "Feature"


class GridpointGeoJSONTypedDict(TypedDict):
    r"""A GeoJSON feature. Please refer to IETF RFC 7946 for information on the GeoJSON format."""

    type: GridpointGeoJSONType
    geometry: Nullable[GeoJSONGeometryTypedDict]
    r"""A GeoJSON geometry object. Please refer to IETF RFC 7946 for information on the GeoJSON format."""
    properties: GridpointTypedDict
    r"""Raw forecast data for a 2.5km grid square.
    This is a list of all potential data layers that may appear. Some layers may not be present in all areas.
    * temperature
    * dewpoint
    * maxTemperature
    * minTemperature
    * relativeHumidity
    * apparentTemperature
    * heatIndex
    * windChill
    * wetBulbGlobeTemperature
    * skyCover
    * windDirection
    * windSpeed
    * windGust
    * weather
    * hazards: Watch and advisory products in effect
    * probabilityOfPrecipitation
    * quantitativePrecipitation
    * iceAccumulation
    * snowfallAmount
    * snowLevel
    * ceilingHeight
    * visibility
    * transportWindSpeed
    * transportWindDirection
    * mixingHeight
    * hainesIndex
    * lightningActivityLevel
    * twentyFootWindSpeed
    * twentyFootWindDirection
    * waveHeight
    * wavePeriod
    * waveDirection
    * primarySwellHeight
    * primarySwellDirection
    * secondarySwellHeight
    * secondarySwellDirection
    * wavePeriod2
    * windWaveHeight
    * dispersionIndex
    * pressure: Barometric pressure
    * probabilityOfTropicalStormWinds
    * probabilityOfHurricaneWinds
    * potentialOf15mphWinds
    * potentialOf25mphWinds
    * potentialOf35mphWinds
    * potentialOf45mphWinds
    * potentialOf20mphWindGusts
    * potentialOf30mphWindGusts
    * potentialOf40mphWindGusts
    * potentialOf50mphWindGusts
    * potentialOf60mphWindGusts
    * grasslandFireDangerIndex
    * probabilityOfThunder
    * davisStabilityIndex
    * atmosphericDispersionIndex
    * lowVisibilityOccurrenceRiskIndex
    * stability
    * redFlagThreatIndex

    """
    at_context: NotRequired[JSONLdContextUnionTypedDict]
    id: NotRequired[str]


class GridpointGeoJSON(BaseModel):
    r"""A GeoJSON feature. Please refer to IETF RFC 7946 for information on the GeoJSON format."""

    type: GridpointGeoJSONType

    geometry: Nullable[GeoJSONGeometry]
    r"""A GeoJSON geometry object. Please refer to IETF RFC 7946 for information on the GeoJSON format."""

    properties: Gridpoint
    r"""Raw forecast data for a 2.5km grid square.
    This is a list of all potential data layers that may appear. Some layers may not be present in all areas.
    * temperature
    * dewpoint
    * maxTemperature
    * minTemperature
    * relativeHumidity
    * apparentTemperature
    * heatIndex
    * windChill
    * wetBulbGlobeTemperature
    * skyCover
    * windDirection
    * windSpeed
    * windGust
    * weather
    * hazards: Watch and advisory products in effect
    * probabilityOfPrecipitation
    * quantitativePrecipitation
    * iceAccumulation
    * snowfallAmount
    * snowLevel
    * ceilingHeight
    * visibility
    * transportWindSpeed
    * transportWindDirection
    * mixingHeight
    * hainesIndex
    * lightningActivityLevel
    * twentyFootWindSpeed
    * twentyFootWindDirection
    * waveHeight
    * wavePeriod
    * waveDirection
    * primarySwellHeight
    * primarySwellDirection
    * secondarySwellHeight
    * secondarySwellDirection
    * wavePeriod2
    * windWaveHeight
    * dispersionIndex
    * pressure: Barometric pressure
    * probabilityOfTropicalStormWinds
    * probabilityOfHurricaneWinds
    * potentialOf15mphWinds
    * potentialOf25mphWinds
    * potentialOf35mphWinds
    * potentialOf45mphWinds
    * potentialOf20mphWindGusts
    * potentialOf30mphWindGusts
    * potentialOf40mphWindGusts
    * potentialOf50mphWindGusts
    * potentialOf60mphWindGusts
    * grasslandFireDangerIndex
    * probabilityOfThunder
    * davisStabilityIndex
    * atmosphericDispersionIndex
    * lowVisibilityOccurrenceRiskIndex
    * stability
    * redFlagThreatIndex

    """

    at_context: Annotated[
        Optional[JSONLdContextUnion], pydantic.Field(alias="@context")
    ] = None

    id: Optional[str] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["@context", "id"]
        nullable_fields = ["geometry"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
