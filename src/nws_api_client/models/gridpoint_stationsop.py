"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .nwsforecastofficeid import NWSForecastOfficeID
from .observationstationcollectiongeojson import (
    ObservationStationCollectionGeoJSON,
    ObservationStationCollectionGeoJSONTypedDict,
)
from .observationstationcollectionjsonld import (
    ObservationStationCollectionJSONLd,
    ObservationStationCollectionJSONLdTypedDict,
)
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from nws_api_client.types import BaseModel
from nws_api_client.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GridpointStationsRequestTypedDict(TypedDict):
    wfo: NWSForecastOfficeID
    r"""Forecast office ID"""
    point: List[int]
    r"""Two-element array encoding grid X and Y (comma-separated)"""
    limit: NotRequired[int]
    r"""Limit"""
    cursor: NotRequired[str]
    r"""Pagination cursor"""


class GridpointStationsRequest(BaseModel):
    wfo: Annotated[
        NWSForecastOfficeID,
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Forecast office ID"""

    point: Annotated[
        List[int], FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Two-element array encoding grid X and Y (comma-separated)"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 500
    r"""Limit"""

    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Pagination cursor"""


GridpointStationsResponseResultTypedDict = TypeAliasType(
    "GridpointStationsResponseResultTypedDict",
    Union[
        ObservationStationCollectionJSONLdTypedDict,
        ObservationStationCollectionGeoJSONTypedDict,
        ProblemDetailTypedDict,
    ],
)


GridpointStationsResponseResult = TypeAliasType(
    "GridpointStationsResponseResult",
    Union[
        ObservationStationCollectionJSONLd,
        ObservationStationCollectionGeoJSON,
        ProblemDetail,
    ],
)


class GridpointStationsResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: GridpointStationsResponseResultTypedDict


class GridpointStationsResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: GridpointStationsResponseResult
