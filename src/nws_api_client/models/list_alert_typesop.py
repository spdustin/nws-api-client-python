"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from nws_api_client.types import BaseModel
import pydantic
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class ListAlertTypesResponseBodyTypedDict(TypedDict):
    r"""A list of recognized event types"""

    event_types: NotRequired[List[str]]
    r"""A list of recognized event types"""


class ListAlertTypesResponseBody(BaseModel):
    r"""A list of recognized event types"""

    event_types: Annotated[Optional[List[str]], pydantic.Field(alias="eventTypes")] = (
        None
    )
    r"""A list of recognized event types"""


ListAlertTypesResponseResultTypedDict = TypeAliasType(
    "ListAlertTypesResponseResultTypedDict",
    Union[ListAlertTypesResponseBodyTypedDict, ProblemDetailTypedDict],
)


ListAlertTypesResponseResult = TypeAliasType(
    "ListAlertTypesResponseResult", Union[ListAlertTypesResponseBody, ProblemDetail]
)


class ListAlertTypesResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: ListAlertTypesResponseResultTypedDict


class ListAlertTypesResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: ListAlertTypesResponseResult
