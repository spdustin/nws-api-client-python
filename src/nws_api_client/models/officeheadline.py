"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .jsonldcontext_union import JSONLdContextUnion, JSONLdContextUnionTypedDict
from datetime import datetime
from nws_api_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class OfficeHeadlineTypedDict(TypedDict):
    at_context: NotRequired[JSONLdContextUnionTypedDict]
    at_id: NotRequired[str]
    id: NotRequired[str]
    office: NotRequired[str]
    important: NotRequired[bool]
    issuance_time: NotRequired[datetime]
    link: NotRequired[str]
    name: NotRequired[str]
    title: NotRequired[str]
    summary: NotRequired[Nullable[str]]
    content: NotRequired[str]


class OfficeHeadline(BaseModel):
    at_context: Annotated[
        Optional[JSONLdContextUnion], pydantic.Field(alias="@context")
    ] = None

    at_id: Annotated[Optional[str], pydantic.Field(alias="@id")] = None

    id: Optional[str] = None

    office: Optional[str] = None

    important: Optional[bool] = None

    issuance_time: Annotated[
        Optional[datetime], pydantic.Field(alias="issuanceTime")
    ] = None

    link: Optional[str] = None

    name: Optional[str] = None

    title: Optional[str] = None

    summary: OptionalNullable[str] = UNSET

    content: Optional[str] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "@context",
            "@id",
            "id",
            "office",
            "important",
            "issuanceTime",
            "link",
            "name",
            "title",
            "summary",
            "content",
        ]
        nullable_fields = ["summary"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
