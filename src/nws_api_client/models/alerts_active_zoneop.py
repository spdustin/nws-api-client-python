"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .alertcollectiongeojson import (
    AlertCollectionGeoJSON,
    AlertCollectionGeoJSONTypedDict,
)
from .alertcollectionjsonld import AlertCollectionJSONLd, AlertCollectionJSONLdTypedDict
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from nws_api_client.types import BaseModel
from nws_api_client.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import Dict, List, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class AlertsActiveZoneRequestTypedDict(TypedDict):
    zone_id: str
    r"""NWS public zone/county identifier"""


class AlertsActiveZoneRequest(BaseModel):
    zone_id: Annotated[
        str,
        pydantic.Field(alias="zoneId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""NWS public zone/county identifier"""


AlertsActiveZoneResponseResultTypedDict = TypeAliasType(
    "AlertsActiveZoneResponseResultTypedDict",
    Union[
        AlertCollectionJSONLdTypedDict,
        AlertCollectionGeoJSONTypedDict,
        ProblemDetailTypedDict,
        bytes,
    ],
)


AlertsActiveZoneResponseResult = TypeAliasType(
    "AlertsActiveZoneResponseResult",
    Union[AlertCollectionJSONLd, AlertCollectionGeoJSON, ProblemDetail, bytes],
)


class AlertsActiveZoneResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: AlertsActiveZoneResponseResultTypedDict


class AlertsActiveZoneResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: AlertsActiveZoneResponseResult
