"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from nws_api_client.models.components import (
    nwszonetype as components_nwszonetype,
    zone as components_zone,
    zonegeojson as components_zonegeojson,
)
from nws_api_client.types import BaseModel
from nws_api_client.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetZoneInfoRequestTypedDict(TypedDict):
    type: components_nwszonetype.NWSZoneType
    r"""Zone type"""
    zone_id: str
    r"""NWS public zone/county identifier"""
    effective: NotRequired[datetime]
    r"""Effective date/time"""


class GetZoneInfoRequest(BaseModel):
    type: Annotated[
        components_nwszonetype.NWSZoneType,
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Zone type"""

    zone_id: Annotated[
        str,
        pydantic.Field(alias="zoneId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""NWS public zone/county identifier"""

    effective: Annotated[
        Optional[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Effective date/time"""


GetZoneInfoResponseResultTypedDict = TypeAliasType(
    "GetZoneInfoResponseResultTypedDict",
    Union[components_zonegeojson.ZoneGeoJSONTypedDict, components_zone.ZoneTypedDict],
)


GetZoneInfoResponseResult = TypeAliasType(
    "GetZoneInfoResponseResult",
    Union[components_zonegeojson.ZoneGeoJSON, components_zone.Zone],
)


class GetZoneInfoResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: GetZoneInfoResponseResultTypedDict


class GetZoneInfoResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: GetZoneInfoResponseResult
