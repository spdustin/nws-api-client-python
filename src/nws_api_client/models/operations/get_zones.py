"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from nws_api_client.models.components import (
    areacode as components_areacode,
    nwszonetype as components_nwszonetype,
    regioncode as components_regioncode,
    zonecollectiongeojson as components_zonecollectiongeojson,
    zonecollectionjsonld as components_zonecollectionjsonld,
)
from nws_api_client.types import BaseModel
from nws_api_client.utils import FieldMetadata, QueryParamMetadata
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetZonesRequestTypedDict(TypedDict):
    id: NotRequired[List[str]]
    r"""Zone ID (forecast or county)"""
    area: NotRequired[List[components_areacode.AreaCode]]
    r"""State/marine area code"""
    region: NotRequired[List[components_regioncode.RegionCodeTypedDict]]
    r"""Region code"""
    type: NotRequired[List[components_nwszonetype.NWSZoneType]]
    r"""Zone type"""
    point: NotRequired[str]
    r"""Point (latitude,longitude)"""
    include_geometry: NotRequired[bool]
    r"""Include geometry in results (true/false)"""
    limit: NotRequired[int]
    r"""Limit"""
    effective: NotRequired[datetime]
    r"""Effective date/time"""


class GetZonesRequest(BaseModel):
    id: Annotated[
        Optional[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Zone ID (forecast or county)"""

    area: Annotated[
        Optional[List[components_areacode.AreaCode]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""State/marine area code"""

    region: Annotated[
        Optional[List[components_regioncode.RegionCode]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Region code"""

    type: Annotated[
        Optional[List[components_nwszonetype.NWSZoneType]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Zone type"""

    point: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Point (latitude,longitude)"""

    include_geometry: Annotated[
        Optional[bool],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Include geometry in results (true/false)"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Limit"""

    effective: Annotated[
        Optional[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Effective date/time"""


GetZonesResponseResultTypedDict = TypeAliasType(
    "GetZonesResponseResultTypedDict",
    Union[
        components_zonecollectionjsonld.ZoneCollectionJSONLdTypedDict,
        components_zonecollectiongeojson.ZoneCollectionGeoJSONTypedDict,
    ],
)


GetZonesResponseResult = TypeAliasType(
    "GetZonesResponseResult",
    Union[
        components_zonecollectionjsonld.ZoneCollectionJSONLd,
        components_zonecollectiongeojson.ZoneCollectionGeoJSON,
    ],
)


class GetZonesResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: GetZonesResponseResultTypedDict


class GetZonesResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: GetZonesResponseResult
