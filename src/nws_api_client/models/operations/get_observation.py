"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from datetime import datetime
from nws_api_client.models.components import (
    observation as components_observation,
    observationgeojson as components_observationgeojson,
)
from nws_api_client.types import BaseModel
from nws_api_client.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import Dict, List, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class GetObservationRequestTypedDict(TypedDict):
    station_id: str
    r"""Observation station ID"""
    timestamp: datetime
    r"""Timestamp of requested observation (YYYY-MM-DDThh:mm:ssZ or YYYY-MM-DDThh:mm:ss+hh:mm)"""


class GetObservationRequest(BaseModel):
    station_id: Annotated[
        str,
        pydantic.Field(alias="stationId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Observation station ID"""

    timestamp: Annotated[
        datetime, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Timestamp of requested observation (YYYY-MM-DDThh:mm:ssZ or YYYY-MM-DDThh:mm:ss+hh:mm)"""


GetObservationResponseResultTypedDict = TypeAliasType(
    "GetObservationResponseResultTypedDict",
    Union[
        components_observationgeojson.ObservationGeoJSONTypedDict,
        components_observation.ObservationTypedDict,
        bytes,
    ],
)


GetObservationResponseResult = TypeAliasType(
    "GetObservationResponseResult",
    Union[
        components_observationgeojson.ObservationGeoJSON,
        components_observation.Observation,
        bytes,
    ],
)


class GetObservationResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: GetObservationResponseResultTypedDict


class GetObservationResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: GetObservationResponseResult
