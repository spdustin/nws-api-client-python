"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from nws_api_client.models.components import (
    gridpointforecastfeatureflags as components_gridpointforecastfeatureflags,
    gridpointforecastgeojson as components_gridpointforecastgeojson,
    gridpointforecastjsonld as components_gridpointforecastjsonld,
    gridpointforecastunits as components_gridpointforecastunits,
    nwsforecastofficeid as components_nwsforecastofficeid,
)
from nws_api_client.types import BaseModel
from nws_api_client.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    QueryParamMetadata,
)
import pydantic
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetHourlyForecastRequestTypedDict(TypedDict):
    wfo: components_nwsforecastofficeid.NWSForecastOfficeID
    r"""Forecast office ID"""
    gridpoint: str
    r"""Forecast gridpoint pair(see https://weather-gov.github.io/api/gridpoints for more info)"""
    feature_flags: NotRequired[
        List[components_gridpointforecastfeatureflags.GridpointForecastFeatureFlags]
    ]
    r"""Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue

    """
    units: NotRequired[components_gridpointforecastunits.GridpointForecastUnits]
    r"""Use US customary or SI (metric) units in textual output"""


class GetHourlyForecastRequest(BaseModel):
    wfo: Annotated[
        components_nwsforecastofficeid.NWSForecastOfficeID,
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Forecast office ID"""

    gridpoint: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Forecast gridpoint pair(see https://weather-gov.github.io/api/gridpoints for more info)"""

    feature_flags: Annotated[
        Optional[
            List[components_gridpointforecastfeatureflags.GridpointForecastFeatureFlags]
        ],
        pydantic.Field(alias="Feature-Flags"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Enable future and experimental features (see documentation for more info): * forecast_temperature_qv: Represent temperature as QuantitativeValue * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue

    """

    units: Annotated[
        Optional[components_gridpointforecastunits.GridpointForecastUnits],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = components_gridpointforecastunits.GridpointForecastUnits.US
    r"""Use US customary or SI (metric) units in textual output"""


GetHourlyForecastResponseResultTypedDict = TypeAliasType(
    "GetHourlyForecastResponseResultTypedDict",
    Union[
        components_gridpointforecastgeojson.GridpointForecastGeoJSONTypedDict,
        components_gridpointforecastjsonld.GridpointForecastJSONLdTypedDict,
        bytes,
    ],
)


GetHourlyForecastResponseResult = TypeAliasType(
    "GetHourlyForecastResponseResult",
    Union[
        components_gridpointforecastgeojson.GridpointForecastGeoJSON,
        components_gridpointforecastjsonld.GridpointForecastJSONLd,
        bytes,
    ],
)


class GetHourlyForecastResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: GetHourlyForecastResponseResultTypedDict


class GetHourlyForecastResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: GetHourlyForecastResponseResult
