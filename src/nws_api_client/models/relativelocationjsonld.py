"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .quantitativevalue import QuantitativeValue, QuantitativeValueTypedDict
from nws_api_client.types import BaseModel, Nullable, UNSET_SENTINEL
from pydantic import model_serializer
from typing import Optional
from typing_extensions import NotRequired, TypedDict


class RelativeLocationJSONLdTypedDict(TypedDict):
    geometry: Nullable[str]
    r"""A geometry represented in Well-Known Text (WKT) format."""
    city: NotRequired[str]
    state: NotRequired[str]
    distance: NotRequired[QuantitativeValueTypedDict]
    r"""A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue

    """
    bearing: NotRequired[QuantitativeValueTypedDict]
    r"""A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue

    """


class RelativeLocationJSONLd(BaseModel):
    geometry: Nullable[str]
    r"""A geometry represented in Well-Known Text (WKT) format."""

    city: Optional[str] = None

    state: Optional[str] = None

    distance: Optional[QuantitativeValue] = None
    r"""A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue

    """

    bearing: Optional[QuantitativeValue] = None
    r"""A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue

    """

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["city", "state", "distance", "bearing"]
        nullable_fields = ["geometry"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
