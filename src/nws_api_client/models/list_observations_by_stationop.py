"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .observationcollectiongeojson import (
    ObservationCollectionGeoJSON,
    ObservationCollectionGeoJSONTypedDict,
)
from .observationcollectionjsonld import (
    ObservationCollectionJSONLd,
    ObservationCollectionJSONLdTypedDict,
)
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from datetime import datetime
from nws_api_client.types import BaseModel
from nws_api_client.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class ListObservationsByStationRequestTypedDict(TypedDict):
    station_id: str
    r"""Observation station ID"""
    start: NotRequired[datetime]
    r"""Start time"""
    end: NotRequired[datetime]
    r"""End time"""
    limit: NotRequired[int]
    r"""Limit"""


class ListObservationsByStationRequest(BaseModel):
    station_id: Annotated[
        str,
        pydantic.Field(alias="stationId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Observation station ID"""

    start: Annotated[
        Optional[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Start time"""

    end: Annotated[
        Optional[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""End time"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Limit"""


ListObservationsByStationResponseResultTypedDict = TypeAliasType(
    "ListObservationsByStationResponseResultTypedDict",
    Union[
        ObservationCollectionJSONLdTypedDict,
        ObservationCollectionGeoJSONTypedDict,
        ProblemDetailTypedDict,
    ],
)


ListObservationsByStationResponseResult = TypeAliasType(
    "ListObservationsByStationResponseResult",
    Union[ObservationCollectionJSONLd, ObservationCollectionGeoJSON, ProblemDetail],
)


class ListObservationsByStationResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: ListObservationsByStationResponseResultTypedDict


class ListObservationsByStationResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: ListObservationsByStationResponseResult
