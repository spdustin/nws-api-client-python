"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .gridpointforecastfeatureflags import GridpointForecastFeatureFlags
from .gridpointforecastgeojson import (
    GridpointForecastGeoJSON,
    GridpointForecastGeoJSONTypedDict,
)
from .gridpointforecastjsonld import (
    GridpointForecastJSONLd,
    GridpointForecastJSONLdTypedDict,
)
from .gridpointforecastunits import GridpointForecastUnits
from .nwsforecastofficeid import NWSForecastOfficeID
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from nws_api_client.types import BaseModel
from nws_api_client.utils import (
    FieldMetadata,
    HeaderMetadata,
    PathParamMetadata,
    QueryParamMetadata,
)
import pydantic
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GridpointForecastHourlyRequestTypedDict(TypedDict):
    wfo: NWSForecastOfficeID
    r"""Forecast office ID"""
    point: List[int]
    r"""Two-element array encoding grid X and Y (comma-separated)"""
    feature_flags: NotRequired[List[GridpointForecastFeatureFlags]]
    r"""Enable future and experimental features (see documentation for more info):
    * forecast_temperature_qv: Represent temperature as QuantitativeValue
    * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue

    """
    units: NotRequired[GridpointForecastUnits]
    r"""Use US customary or SI (metric) units in textual output"""


class GridpointForecastHourlyRequest(BaseModel):
    wfo: Annotated[
        NWSForecastOfficeID,
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Forecast office ID"""

    point: Annotated[
        List[int], FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Two-element array encoding grid X and Y (comma-separated)"""

    feature_flags: Annotated[
        Optional[List[GridpointForecastFeatureFlags]],
        pydantic.Field(alias="Feature-Flags"),
        FieldMetadata(header=HeaderMetadata(style="simple", explode=False)),
    ] = None
    r"""Enable future and experimental features (see documentation for more info):
    * forecast_temperature_qv: Represent temperature as QuantitativeValue
    * forecast_wind_speed_qv: Represent wind speed as QuantitativeValue

    """

    units: Annotated[
        Optional[GridpointForecastUnits],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = GridpointForecastUnits.US
    r"""Use US customary or SI (metric) units in textual output"""


GridpointForecastHourlyResponseResultTypedDict = TypeAliasType(
    "GridpointForecastHourlyResponseResultTypedDict",
    Union[
        GridpointForecastGeoJSONTypedDict,
        ProblemDetailTypedDict,
        GridpointForecastJSONLdTypedDict,
        bytes,
    ],
)


GridpointForecastHourlyResponseResult = TypeAliasType(
    "GridpointForecastHourlyResponseResult",
    Union[GridpointForecastGeoJSON, ProblemDetail, GridpointForecastJSONLd, bytes],
)


class GridpointForecastHourlyResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: GridpointForecastHourlyResponseResultTypedDict


class GridpointForecastHourlyResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: GridpointForecastHourlyResponseResult
