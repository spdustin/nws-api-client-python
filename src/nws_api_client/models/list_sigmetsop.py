"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from .sigmetcollectiongeojson import (
    SigmetCollectionGeoJSON,
    SigmetCollectionGeoJSONTypedDict,
)
from datetime import date, datetime
from nws_api_client.types import BaseModel
from nws_api_client.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class ListSigmetsRequestTypedDict(TypedDict):
    start: NotRequired[datetime]
    r"""Start time"""
    end: NotRequired[datetime]
    r"""End time"""
    date_: NotRequired[date]
    r"""Date (YYYY-MM-DD format)"""
    atsu: NotRequired[str]
    r"""ATSU identifier"""
    sequence: NotRequired[str]
    r"""SIGMET sequence number"""


class ListSigmetsRequest(BaseModel):
    start: Annotated[
        Optional[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Start time"""

    end: Annotated[
        Optional[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""End time"""

    date_: Annotated[
        Optional[date],
        pydantic.Field(alias="date"),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Date (YYYY-MM-DD format)"""

    atsu: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""ATSU identifier"""

    sequence: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""SIGMET sequence number"""


ListSigmetsResponseResultTypedDict = TypeAliasType(
    "ListSigmetsResponseResultTypedDict",
    Union[SigmetCollectionGeoJSONTypedDict, ProblemDetailTypedDict],
)


ListSigmetsResponseResult = TypeAliasType(
    "ListSigmetsResponseResult", Union[SigmetCollectionGeoJSON, ProblemDetail]
)


class ListSigmetsResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: ListSigmetsResponseResultTypedDict


class ListSigmetsResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: ListSigmetsResponseResult
