"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .nwszonetype import NWSZoneType
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from .zone import Zone, ZoneTypedDict
from .zonegeojson import ZoneGeoJSON, ZoneGeoJSONTypedDict
from datetime import datetime
from nws_api_client.types import BaseModel
from nws_api_client.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class GetZoneMetadataRequestTypedDict(TypedDict):
    type: NWSZoneType
    r"""Zone type"""
    zone_id: str
    r"""NWS public zone/county identifier"""
    effective: NotRequired[datetime]
    r"""Effective date/time"""


class GetZoneMetadataRequest(BaseModel):
    type: Annotated[
        NWSZoneType,
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Zone type"""

    zone_id: Annotated[
        str,
        pydantic.Field(alias="zoneId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""NWS public zone/county identifier"""

    effective: Annotated[
        Optional[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Effective date/time"""


GetZoneMetadataResponseResultTypedDict = TypeAliasType(
    "GetZoneMetadataResponseResultTypedDict",
    Union[ZoneGeoJSONTypedDict, ProblemDetailTypedDict, ZoneTypedDict],
)


GetZoneMetadataResponseResult = TypeAliasType(
    "GetZoneMetadataResponseResult", Union[ZoneGeoJSON, ProblemDetail, Zone]
)


class GetZoneMetadataResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: GetZoneMetadataResponseResultTypedDict


class GetZoneMetadataResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: GetZoneMetadataResponseResult
