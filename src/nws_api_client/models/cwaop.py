"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .centerweatheradvisorygeojson import (
    CenterWeatherAdvisoryGeoJSON,
    CenterWeatherAdvisoryGeoJSONTypedDict,
)
from .nwscenterweatherserviceunitid import NWSCenterWeatherServiceUnitID
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from datetime import date
from nws_api_client.types import BaseModel
from nws_api_client.utils import FieldMetadata, PathParamMetadata
import pydantic
from typing import Dict, List, Union
from typing_extensions import Annotated, TypeAliasType, TypedDict


class CwaRequestTypedDict(TypedDict):
    cwsu_id: NWSCenterWeatherServiceUnitID
    r"""NWS CWSU ID"""
    date_: date
    r"""Date (YYYY-MM-DD format)"""
    sequence: int
    r"""Sequence number"""


class CwaRequest(BaseModel):
    cwsu_id: Annotated[
        NWSCenterWeatherServiceUnitID,
        pydantic.Field(alias="cwsuId"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""NWS CWSU ID"""

    date_: Annotated[
        date,
        pydantic.Field(alias="date"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""Date (YYYY-MM-DD format)"""

    sequence: Annotated[
        int, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""Sequence number"""


CwaResponseResultTypedDict = TypeAliasType(
    "CwaResponseResultTypedDict",
    Union[CenterWeatherAdvisoryGeoJSONTypedDict, ProblemDetailTypedDict, bytes],
)


CwaResponseResult = TypeAliasType(
    "CwaResponseResult", Union[CenterWeatherAdvisoryGeoJSON, ProblemDetail, bytes]
)


class CwaResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: CwaResponseResultTypedDict


class CwaResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: CwaResponseResult
