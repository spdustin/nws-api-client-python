"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .alertcertainty import AlertCertainty
from .alertmessagetype import AlertMessageType
from .alertseverity import AlertSeverity
from .alertstatus import AlertStatus
from .alerturgency import AlertUrgency
from datetime import datetime
from enum import Enum
from nws_api_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Any, Dict, List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class Category(str, Enum):
    r"""The code denoting the category of the subject event of the alert message."""

    MET = "Met"
    GEO = "Geo"
    SAFETY = "Safety"
    SECURITY = "Security"
    RESCUE = "Rescue"
    FIRE = "Fire"
    HEALTH = "Health"
    ENV = "Env"
    TRANSPORT = "Transport"
    INFRA = "Infra"
    CBRNE = "CBRNE"
    OTHER = "Other"


class GeocodeTypedDict(TypedDict):
    r"""Lists of codes for NWS public zones and counties affected by the alert."""

    same: NotRequired[List[str]]
    r"""A list of SAME (Specific Area Message Encoding) codes for affected counties."""
    ugc: NotRequired[List[str]]
    r"""A list of NWS public zone or county identifiers."""


class Geocode(BaseModel):
    r"""Lists of codes for NWS public zones and counties affected by the alert."""

    same: Annotated[Optional[List[str]], pydantic.Field(alias="SAME")] = None
    r"""A list of SAME (Specific Area Message Encoding) codes for affected counties."""

    ugc: Annotated[Optional[List[str]], pydantic.Field(alias="UGC")] = None
    r"""A list of NWS public zone or county identifiers."""


class ReferenceTypedDict(TypedDict):
    at_id: NotRequired[str]
    r"""An API link to the prior alert."""
    identifier: NotRequired[str]
    r"""The identifier of the alert message."""
    sender: NotRequired[str]
    r"""The sender of the prior alert."""
    sent: NotRequired[datetime]
    r"""The time the prior alert was sent."""


class Reference(BaseModel):
    at_id: Annotated[Optional[str], pydantic.Field(alias="@id")] = None
    r"""An API link to the prior alert."""

    identifier: Optional[str] = None
    r"""The identifier of the alert message."""

    sender: Optional[str] = None
    r"""The sender of the prior alert."""

    sent: Optional[datetime] = None
    r"""The time the prior alert was sent."""


class Response(str, Enum):
    r"""The code denoting the type of action recommended for the target audience. This corresponds to responseType in the CAP specification."""

    SHELTER = "Shelter"
    EVACUATE = "Evacuate"
    PREPARE = "Prepare"
    EXECUTE = "Execute"
    AVOID = "Avoid"
    MONITOR = "Monitor"
    ASSESS = "Assess"
    ALL_CLEAR = "AllClear"
    NONE = "None"


class AlertTypedDict(TypedDict):
    r"""An object representing a public alert message. Unless otherwise noted, the fields in this object correspond to the National Weather Service CAP v1.2 specification, which extends the OASIS Common Alerting Protocol (CAP) v1.2 specification and USA Integrated Public Alert and Warning System (IPAWS) Profile v1.0. Refer to this documentation for more complete information. http://docs.oasis-open.org/emergency/cap/v1.2/CAP-v1.2-os.html http://docs.oasis-open.org/emergency/cap/v1.2/ipaws-profile/v1.0/cs01/cap-v1.2-ipaws-profile-cs01.html https://alerts.weather.gov/#technical-notes-v12"""

    affected_zones: NotRequired[List[str]]
    r"""An array of API links for zones affected by the alert. This is an API-specific extension field and is not part of the CAP specification."""
    area_desc: NotRequired[str]
    r"""A textual description of the area affected by the alert."""
    category: NotRequired[Category]
    r"""The code denoting the category of the subject event of the alert message."""
    certainty: NotRequired[AlertCertainty]
    description: NotRequired[str]
    r"""The text describing the subject event of the alert message."""
    effective: NotRequired[datetime]
    r"""The effective time of the information of the alert message."""
    ends: NotRequired[Nullable[datetime]]
    r"""The expected end time of the subject event of the alert message."""
    event: NotRequired[str]
    r"""The text denoting the type of the subject event of the alert message."""
    expires: NotRequired[datetime]
    r"""The expiry time of the information of the alert message."""
    geocode: NotRequired[GeocodeTypedDict]
    r"""Lists of codes for NWS public zones and counties affected by the alert."""
    headline: NotRequired[Nullable[str]]
    r"""The text headline of the alert message."""
    id: NotRequired[str]
    r"""The identifier of the alert message."""
    instruction: NotRequired[Nullable[str]]
    r"""The text describing the recommended action to be taken by recipients of the alert message."""
    message_type: NotRequired[AlertMessageType]
    onset: NotRequired[Nullable[datetime]]
    r"""The expected time of the beginning of the subject event of the alert message."""
    parameters: NotRequired[Dict[str, List[Any]]]
    r"""System-specific additional parameters associated with the alert message. The keys in this object correspond to parameter definitions in the NWS CAP specification."""
    references: NotRequired[List[ReferenceTypedDict]]
    r"""A list of prior alerts that this alert updates or replaces."""
    response: NotRequired[Response]
    r"""The code denoting the type of action recommended for the target audience. This corresponds to responseType in the CAP specification."""
    sender: NotRequired[str]
    r"""Email address of the NWS webmaster."""
    sender_name: NotRequired[str]
    r"""The text naming the originator of the alert message."""
    sent: NotRequired[datetime]
    r"""The time of the origination of the alert message."""
    severity: NotRequired[AlertSeverity]
    status: NotRequired[AlertStatus]
    urgency: NotRequired[AlertUrgency]


class Alert(BaseModel):
    r"""An object representing a public alert message. Unless otherwise noted, the fields in this object correspond to the National Weather Service CAP v1.2 specification, which extends the OASIS Common Alerting Protocol (CAP) v1.2 specification and USA Integrated Public Alert and Warning System (IPAWS) Profile v1.0. Refer to this documentation for more complete information. http://docs.oasis-open.org/emergency/cap/v1.2/CAP-v1.2-os.html http://docs.oasis-open.org/emergency/cap/v1.2/ipaws-profile/v1.0/cs01/cap-v1.2-ipaws-profile-cs01.html https://alerts.weather.gov/#technical-notes-v12"""

    affected_zones: Annotated[
        Optional[List[str]], pydantic.Field(alias="affectedZones")
    ] = None
    r"""An array of API links for zones affected by the alert. This is an API-specific extension field and is not part of the CAP specification."""

    area_desc: Annotated[Optional[str], pydantic.Field(alias="areaDesc")] = None
    r"""A textual description of the area affected by the alert."""

    category: Optional[Category] = None
    r"""The code denoting the category of the subject event of the alert message."""

    certainty: Optional[AlertCertainty] = None

    description: Optional[str] = None
    r"""The text describing the subject event of the alert message."""

    effective: Optional[datetime] = None
    r"""The effective time of the information of the alert message."""

    ends: OptionalNullable[datetime] = UNSET
    r"""The expected end time of the subject event of the alert message."""

    event: Optional[str] = None
    r"""The text denoting the type of the subject event of the alert message."""

    expires: Optional[datetime] = None
    r"""The expiry time of the information of the alert message."""

    geocode: Optional[Geocode] = None
    r"""Lists of codes for NWS public zones and counties affected by the alert."""

    headline: OptionalNullable[str] = UNSET
    r"""The text headline of the alert message."""

    id: Optional[str] = None
    r"""The identifier of the alert message."""

    instruction: OptionalNullable[str] = UNSET
    r"""The text describing the recommended action to be taken by recipients of the alert message."""

    message_type: Annotated[
        Optional[AlertMessageType], pydantic.Field(alias="messageType")
    ] = None

    onset: OptionalNullable[datetime] = UNSET
    r"""The expected time of the beginning of the subject event of the alert message."""

    parameters: Optional[Dict[str, List[Any]]] = None
    r"""System-specific additional parameters associated with the alert message. The keys in this object correspond to parameter definitions in the NWS CAP specification."""

    references: Optional[List[Reference]] = None
    r"""A list of prior alerts that this alert updates or replaces."""

    response: Optional[Response] = None
    r"""The code denoting the type of action recommended for the target audience. This corresponds to responseType in the CAP specification."""

    sender: Optional[str] = None
    r"""Email address of the NWS webmaster."""

    sender_name: Annotated[Optional[str], pydantic.Field(alias="senderName")] = None
    r"""The text naming the originator of the alert message."""

    sent: Optional[datetime] = None
    r"""The time of the origination of the alert message."""

    severity: Optional[AlertSeverity] = None

    status: Optional[AlertStatus] = None

    urgency: Optional[AlertUrgency] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "affectedZones",
            "areaDesc",
            "category",
            "certainty",
            "description",
            "effective",
            "ends",
            "event",
            "expires",
            "geocode",
            "headline",
            "id",
            "instruction",
            "messageType",
            "onset",
            "parameters",
            "references",
            "response",
            "sender",
            "senderName",
            "sent",
            "severity",
            "status",
            "urgency",
        ]
        nullable_fields = ["ends", "headline", "instruction", "onset"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
