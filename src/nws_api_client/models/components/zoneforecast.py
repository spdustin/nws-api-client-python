"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .jsonldcontext_union import JSONLdContextUnion, JSONLdContextUnionTypedDict
from datetime import datetime
from nws_api_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import List, Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class PeriodTypedDict(TypedDict):
    detailed_forecast: str
    r"""A detailed textual forecast for the period."""
    name: str
    r"""A textual description of the period."""
    number: int
    r"""A sequential identifier number."""


class Period(BaseModel):
    detailed_forecast: Annotated[str, pydantic.Field(alias="detailedForecast")]
    r"""A detailed textual forecast for the period."""

    name: str
    r"""A textual description of the period."""

    number: int
    r"""A sequential identifier number."""


class ZoneForecastTypedDict(TypedDict):
    r"""An object representing a zone area forecast."""

    at_context: NotRequired[JSONLdContextUnionTypedDict]
    geometry: NotRequired[Nullable[str]]
    r"""A geometry represented in Well-Known Text (WKT) format."""
    periods: NotRequired[List[PeriodTypedDict]]
    r"""An array of forecast periods."""
    updated: NotRequired[datetime]
    r"""The time this zone forecast product was published."""
    zone: NotRequired[str]
    r"""An API link to the zone this forecast is for."""


class ZoneForecast(BaseModel):
    r"""An object representing a zone area forecast."""

    at_context: Annotated[
        Optional[JSONLdContextUnion], pydantic.Field(alias="@context")
    ] = None

    geometry: OptionalNullable[str] = UNSET
    r"""A geometry represented in Well-Known Text (WKT) format."""

    periods: Optional[List[Period]] = None
    r"""An array of forecast periods."""

    updated: Optional[datetime] = None
    r"""The time this zone forecast product was published."""

    zone: Optional[str] = None
    r"""An API link to the zone this forecast is for."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = ["@context", "geometry", "periods", "updated", "zone"]
        nullable_fields = ["geometry"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
