"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .jsonldcontext_union import JSONLdContextUnion, JSONLdContextUnionTypedDict
from .quantitativevalue import QuantitativeValue, QuantitativeValueTypedDict
from enum import Enum
from nws_api_client.types import BaseModel, Nullable, UNSET_SENTINEL
import pydantic
from pydantic import model_serializer
from typing import Optional
from typing_extensions import Annotated, NotRequired, TypedDict


class ObservationStationJSONLdAtType(str, Enum):
    WX_OBSERVATION_STATION = "wx:ObservationStation"


class ObservationStationJSONLdTypedDict(TypedDict):
    at_context: JSONLdContextUnionTypedDict
    geometry: Nullable[str]
    r"""A geometry represented in Well-Known Text (WKT) format."""
    at_id: NotRequired[str]
    at_type: NotRequired[ObservationStationJSONLdAtType]
    county: NotRequired[str]
    r"""A link to the NWS county zone containing this station."""
    elevation: NotRequired[QuantitativeValueTypedDict]
    r"""A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue"""
    fire_weather_zone: NotRequired[str]
    r"""A link to the NWS fire weather forecast zone containing this station."""
    forecast: NotRequired[str]
    r"""A link to the NWS public forecast zone containing this station."""
    name: NotRequired[str]
    station_identifier: NotRequired[str]
    time_zone: NotRequired[str]


class ObservationStationJSONLd(BaseModel):
    at_context: Annotated[JSONLdContextUnion, pydantic.Field(alias="@context")]

    geometry: Nullable[str]
    r"""A geometry represented in Well-Known Text (WKT) format."""

    at_id: Annotated[Optional[str], pydantic.Field(alias="@id")] = None

    at_type: Annotated[
        Optional[ObservationStationJSONLdAtType], pydantic.Field(alias="@type")
    ] = None

    county: Optional[str] = None
    r"""A link to the NWS county zone containing this station."""

    elevation: Optional[QuantitativeValue] = None
    r"""A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue"""

    fire_weather_zone: Annotated[
        Optional[str], pydantic.Field(alias="fireWeatherZone")
    ] = None
    r"""A link to the NWS fire weather forecast zone containing this station."""

    forecast: Optional[str] = None
    r"""A link to the NWS public forecast zone containing this station."""

    name: Optional[str] = None

    station_identifier: Annotated[
        Optional[str], pydantic.Field(alias="stationIdentifier")
    ] = None

    time_zone: Annotated[Optional[str], pydantic.Field(alias="timeZone")] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "@id",
            "@type",
            "county",
            "elevation",
            "fireWeatherZone",
            "forecast",
            "name",
            "stationIdentifier",
            "timeZone",
        ]
        nullable_fields = ["geometry"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
