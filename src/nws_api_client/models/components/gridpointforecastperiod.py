"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .quantitativevalue import QuantitativeValue, QuantitativeValueTypedDict
from datetime import datetime
from enum import Enum
from nws_api_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import Optional, Union
from typing_extensions import (
    Annotated,
    NotRequired,
    TypeAliasType,
    TypedDict,
    deprecated,
)


TemperatureTypedDict = TypeAliasType(
    "TemperatureTypedDict", Union[QuantitativeValueTypedDict, int]
)
r"""High/low temperature for the period, depending on whether the period is day or night. This property as an integer value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request."""


Temperature = TypeAliasType("Temperature", Union[QuantitativeValue, int])
r"""High/low temperature for the period, depending on whether the period is day or night. This property as an integer value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request."""


class TemperatureTrend(str, Enum):
    r"""If not null, indicates a non-diurnal temperature trend for the period (either rising temperature overnight, or falling temperature during the day)"""

    RISING = "rising"
    FALLING = "falling"


@deprecated(
    "warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
)
class TemperatureUnit(str, Enum):
    r"""The unit of the temperature value (Fahrenheit or Celsius). This property is deprecated. Future versions will indicate the unit within the quantitative value object for the temperature property. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request."""

    F = "F"
    C = "C"


class WindDirection(str, Enum):
    r"""The prevailing direction of the wind for the period, using a 16-point compass."""

    N = "N"
    NNE = "NNE"
    NE = "NE"
    ENE = "ENE"
    E = "E"
    ESE = "ESE"
    SE = "SE"
    SSE = "SSE"
    S = "S"
    SSW = "SSW"
    SW = "SW"
    WSW = "WSW"
    W = "W"
    WNW = "WNW"
    NW = "NW"
    NNW = "NNW"


WindGustTypedDict = TypeAliasType(
    "WindGustTypedDict", Union[QuantitativeValueTypedDict, str]
)
r"""Peak wind gust for the period. This property as a string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request."""


WindGust = TypeAliasType("WindGust", Union[QuantitativeValue, str])
r"""Peak wind gust for the period. This property as a string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request."""


WindSpeedTypedDict = TypeAliasType(
    "WindSpeedTypedDict", Union[QuantitativeValueTypedDict, str]
)
r"""Wind speed for the period. This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request."""


WindSpeed = TypeAliasType("WindSpeed", Union[QuantitativeValue, str])
r"""Wind speed for the period. This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request."""


class GridpointForecastPeriodTypedDict(TypedDict):
    r"""An object containing forecast information for a specific time period (generally 12-hour or 1-hour)."""

    detailed_forecast: NotRequired[str]
    r"""A detailed textual forecast for the period."""
    dewpoint: NotRequired[QuantitativeValueTypedDict]
    r"""A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue"""
    end_time: NotRequired[datetime]
    r"""The ending time that this forecast period is valid for."""
    icon: NotRequired[str]
    r"""A link to an icon representing the forecast summary."""
    is_daytime: NotRequired[bool]
    r"""Indicates whether this period is daytime or nighttime."""
    name: NotRequired[str]
    r"""A textual identifier for the period. This value will not be present for hourly forecasts."""
    number: NotRequired[int]
    r"""Sequential period number."""
    probability_of_precipitation: NotRequired[QuantitativeValueTypedDict]
    r"""A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue"""
    relative_humidity: NotRequired[QuantitativeValueTypedDict]
    r"""A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue"""
    short_forecast: NotRequired[str]
    r"""A brief textual forecast summary for the period."""
    start_time: NotRequired[datetime]
    r"""The starting time that this forecast period is valid for."""
    temperature: NotRequired[TemperatureTypedDict]
    r"""High/low temperature for the period, depending on whether the period is day or night. This property as an integer value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request."""
    temperature_trend: NotRequired[Nullable[TemperatureTrend]]
    r"""If not null, indicates a non-diurnal temperature trend for the period (either rising temperature overnight, or falling temperature during the day)"""
    temperature_unit: NotRequired[TemperatureUnit]
    r"""The unit of the temperature value (Fahrenheit or Celsius). This property is deprecated. Future versions will indicate the unit within the quantitative value object for the temperature property. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request."""
    wind_direction: NotRequired[WindDirection]
    r"""The prevailing direction of the wind for the period, using a 16-point compass."""
    wind_gust: NotRequired[Nullable[WindGustTypedDict]]
    r"""Peak wind gust for the period. This property as a string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request."""
    wind_speed: NotRequired[WindSpeedTypedDict]
    r"""Wind speed for the period. This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request."""


class GridpointForecastPeriod(BaseModel):
    r"""An object containing forecast information for a specific time period (generally 12-hour or 1-hour)."""

    detailed_forecast: Annotated[
        Optional[str], pydantic.Field(alias="detailedForecast")
    ] = None
    r"""A detailed textual forecast for the period."""

    dewpoint: Optional[QuantitativeValue] = None
    r"""A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue"""

    end_time: Annotated[Optional[datetime], pydantic.Field(alias="endTime")] = None
    r"""The ending time that this forecast period is valid for."""

    icon: Annotated[
        Optional[str],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None
    r"""A link to an icon representing the forecast summary."""

    is_daytime: Annotated[Optional[bool], pydantic.Field(alias="isDaytime")] = None
    r"""Indicates whether this period is daytime or nighttime."""

    name: Optional[str] = None
    r"""A textual identifier for the period. This value will not be present for hourly forecasts."""

    number: Optional[int] = None
    r"""Sequential period number."""

    probability_of_precipitation: Annotated[
        Optional[QuantitativeValue], pydantic.Field(alias="probabilityOfPrecipitation")
    ] = None
    r"""A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue"""

    relative_humidity: Annotated[
        Optional[QuantitativeValue], pydantic.Field(alias="relativeHumidity")
    ] = None
    r"""A structured value representing a measurement and its unit of measure. This object is a slighly modified version of the schema.org definition at https://schema.org/QuantitativeValue"""

    short_forecast: Annotated[Optional[str], pydantic.Field(alias="shortForecast")] = (
        None
    )
    r"""A brief textual forecast summary for the period."""

    start_time: Annotated[Optional[datetime], pydantic.Field(alias="startTime")] = None
    r"""The starting time that this forecast period is valid for."""

    temperature: Optional[Temperature] = None
    r"""High/low temperature for the period, depending on whether the period is day or night. This property as an integer value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request."""

    temperature_trend: Annotated[
        OptionalNullable[TemperatureTrend], pydantic.Field(alias="temperatureTrend")
    ] = UNSET
    r"""If not null, indicates a non-diurnal temperature trend for the period (either rising temperature overnight, or falling temperature during the day)"""

    temperature_unit: Annotated[
        Optional[TemperatureUnit],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.",
            alias="temperatureUnit",
        ),
    ] = None
    r"""The unit of the temperature value (Fahrenheit or Celsius). This property is deprecated. Future versions will indicate the unit within the quantitative value object for the temperature property. To make use of the future standard format now, set the \"forecast_temperature_qv\" feature flag on the request."""

    wind_direction: Annotated[
        Optional[WindDirection], pydantic.Field(alias="windDirection")
    ] = None
    r"""The prevailing direction of the wind for the period, using a 16-point compass."""

    wind_gust: Annotated[
        OptionalNullable[WindGust], pydantic.Field(alias="windGust")
    ] = UNSET
    r"""Peak wind gust for the period. This property as a string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request."""

    wind_speed: Annotated[Optional[WindSpeed], pydantic.Field(alias="windSpeed")] = None
    r"""Wind speed for the period. This property as an string value is deprecated. Future versions will express this value as a quantitative value object. To make use of the future standard format now, set the \"forecast_wind_speed_qv\" feature flag on the request."""

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "detailedForecast",
            "dewpoint",
            "endTime",
            "icon",
            "isDaytime",
            "name",
            "number",
            "probabilityOfPrecipitation",
            "relativeHumidity",
            "shortForecast",
            "startTime",
            "temperature",
            "temperatureTrend",
            "temperatureUnit",
            "windDirection",
            "windGust",
            "windSpeed",
        ]
        nullable_fields = ["temperatureTrend", "windGust"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
