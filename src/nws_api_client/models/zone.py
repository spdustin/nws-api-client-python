"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .jsonldcontext_union import JSONLdContextUnion, JSONLdContextUnionTypedDict
from .nwsforecastofficeid import NWSForecastOfficeID
from .nwszonetype import NWSZoneType
from .stateterritorycode import StateTerritoryCode
from datetime import datetime
from enum import Enum
from nws_api_client.types import (
    BaseModel,
    Nullable,
    OptionalNullable,
    UNSET,
    UNSET_SENTINEL,
)
import pydantic
from pydantic import model_serializer
from typing import List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class ZoneAtType(str, Enum):
    WX_ZONE = "wx:Zone"


class StateEnum(str, Enum):
    UNKNOWN = ""


StateTypedDict = TypeAliasType("StateTypedDict", Union[StateTerritoryCode, StateEnum])


State = TypeAliasType("State", Union[StateTerritoryCode, StateEnum])


class ZoneTypedDict(TypedDict):
    at_context: NotRequired[JSONLdContextUnionTypedDict]
    at_id: NotRequired[str]
    at_type: NotRequired[ZoneAtType]
    awips_location_identifier: NotRequired[str]
    cwa: NotRequired[List[NWSForecastOfficeID]]
    effective_date: NotRequired[datetime]
    expiration_date: NotRequired[datetime]
    forecast_office: NotRequired[str]
    forecast_offices: NotRequired[List[str]]
    geometry: NotRequired[Nullable[str]]
    r"""A geometry represented in Well-Known Text (WKT) format."""
    grid_identifier: NotRequired[str]
    id: NotRequired[str]
    r"""UGC identifier for a NWS forecast zone or county.
    The first two letters will correspond to either a state code or marine area code (see #/components/schemas/AreaCode for lists of valid letter combinations).
    The third letter will be Z for public/fire zone or C for county.

    """
    name: NotRequired[str]
    observation_stations: NotRequired[List[str]]
    radar_station: NotRequired[Nullable[str]]
    state: NotRequired[Nullable[StateTypedDict]]
    time_zone: NotRequired[List[str]]
    type: NotRequired[NWSZoneType]


class Zone(BaseModel):
    at_context: Annotated[
        Optional[JSONLdContextUnion], pydantic.Field(alias="@context")
    ] = None

    at_id: Annotated[Optional[str], pydantic.Field(alias="@id")] = None

    at_type: Annotated[Optional[ZoneAtType], pydantic.Field(alias="@type")] = None

    awips_location_identifier: Annotated[
        Optional[str], pydantic.Field(alias="awipsLocationIdentifier")
    ] = None

    cwa: Annotated[
        Optional[List[NWSForecastOfficeID]],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
    ] = None

    effective_date: Annotated[
        Optional[datetime], pydantic.Field(alias="effectiveDate")
    ] = None

    expiration_date: Annotated[
        Optional[datetime], pydantic.Field(alias="expirationDate")
    ] = None

    forecast_office: Annotated[
        Optional[str], pydantic.Field(alias="forecastOffice")
    ] = None

    forecast_offices: Annotated[
        Optional[List[str]],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible.",
            alias="forecastOffices",
        ),
    ] = None

    geometry: OptionalNullable[str] = UNSET
    r"""A geometry represented in Well-Known Text (WKT) format."""

    grid_identifier: Annotated[
        Optional[str], pydantic.Field(alias="gridIdentifier")
    ] = None

    id: Optional[str] = None
    r"""UGC identifier for a NWS forecast zone or county.
    The first two letters will correspond to either a state code or marine area code (see #/components/schemas/AreaCode for lists of valid letter combinations).
    The third letter will be Z for public/fire zone or C for county.

    """

    name: Optional[str] = None

    observation_stations: Annotated[
        Optional[List[str]], pydantic.Field(alias="observationStations")
    ] = None

    radar_station: Annotated[
        OptionalNullable[str], pydantic.Field(alias="radarStation")
    ] = UNSET

    state: OptionalNullable[State] = UNSET

    time_zone: Annotated[Optional[List[str]], pydantic.Field(alias="timeZone")] = None

    type: Optional[NWSZoneType] = None

    @model_serializer(mode="wrap")
    def serialize_model(self, handler):
        optional_fields = [
            "@context",
            "@id",
            "@type",
            "awipsLocationIdentifier",
            "cwa",
            "effectiveDate",
            "expirationDate",
            "forecastOffice",
            "forecastOffices",
            "geometry",
            "gridIdentifier",
            "id",
            "name",
            "observationStations",
            "radarStation",
            "state",
            "timeZone",
            "type",
        ]
        nullable_fields = ["geometry", "radarStation", "state"]
        null_default_fields = []

        serialized = handler(self)

        m = {}

        for n, f in type(self).model_fields.items():
            k = f.alias or n
            val = serialized.get(k)
            serialized.pop(k, None)

            optional_nullable = k in optional_fields and k in nullable_fields
            is_set = (
                self.__pydantic_fields_set__.intersection({n})
                or k in null_default_fields
            )  # pylint: disable=no-member

            if val is not None and val != UNSET_SENTINEL:
                m[k] = val
            elif val != UNSET_SENTINEL and (
                not k in optional_fields or (optional_nullable and is_set)
            ):
                m[k] = val

        return m
