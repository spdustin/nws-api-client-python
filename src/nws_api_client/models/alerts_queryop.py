"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .alertcertainty import AlertCertainty
from .alertcollectiongeojson import (
    AlertCollectionGeoJSON,
    AlertCollectionGeoJSONTypedDict,
)
from .alertcollectionjsonld import AlertCollectionJSONLd, AlertCollectionJSONLdTypedDict
from .alertmessagetype_parameter import AlertMessageTypeParameter
from .alertregiontype import AlertRegionType
from .alertseverity import AlertSeverity
from .alertstatus_parameter import AlertStatusParameter
from .alerturgency import AlertUrgency
from .areacode import AreaCode
from .marineregioncode import MarineRegionCode
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from datetime import datetime
from nws_api_client.types import BaseModel
from nws_api_client.utils import FieldMetadata, QueryParamMetadata
import pydantic
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class AlertsQueryRequestTypedDict(TypedDict):
    active: NotRequired[bool]
    r"""List only active alerts (use /alerts/active endpoints instead)"""
    start: NotRequired[datetime]
    r"""Start time"""
    end: NotRequired[datetime]
    r"""End time"""
    status: NotRequired[List[AlertStatusParameter]]
    r"""Status (actual, exercise, system, test, draft)"""
    message_type: NotRequired[List[AlertMessageTypeParameter]]
    r"""Message type (alert, update, cancel)"""
    event: NotRequired[List[str]]
    r"""Event name"""
    code: NotRequired[List[str]]
    r"""Event code"""
    area: NotRequired[List[AreaCode]]
    r"""State/territory code or marine area code
    This parameter is incompatible with the following parameters: point, region, region_type, zone

    """
    point: NotRequired[str]
    r"""Point (latitude,longitude)
    This parameter is incompatible with the following parameters: area, region, region_type, zone

    """
    region: NotRequired[List[MarineRegionCode]]
    r"""Marine region code
    This parameter is incompatible with the following parameters: area, point, region_type, zone

    """
    region_type: NotRequired[AlertRegionType]
    r"""Region type (land or marine)
    This parameter is incompatible with the following parameters: area, point, region, zone

    """
    zone: NotRequired[List[str]]
    r"""Zone ID (forecast or county)
    This parameter is incompatible with the following parameters: area, point, region, region_type

    """
    urgency: NotRequired[List[AlertUrgency]]
    r"""Urgency (immediate, expected, future, past, unknown)"""
    severity: NotRequired[List[AlertSeverity]]
    r"""Severity (extreme, severe, moderate, minor, unknown)"""
    certainty: NotRequired[List[AlertCertainty]]
    r"""Certainty (observed, likely, possible, unlikely, unknown)"""
    limit: NotRequired[int]
    r"""Limit"""
    cursor: NotRequired[str]
    r"""Pagination cursor"""


class AlertsQueryRequest(BaseModel):
    active: Annotated[
        Optional[bool],
        pydantic.Field(
            deprecated="warning: ** DEPRECATED ** - This will be removed in a future release, please migrate away from it as soon as possible."
        ),
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""List only active alerts (use /alerts/active endpoints instead)"""

    start: Annotated[
        Optional[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Start time"""

    end: Annotated[
        Optional[datetime],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""End time"""

    status: Annotated[
        Optional[List[AlertStatusParameter]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Status (actual, exercise, system, test, draft)"""

    message_type: Annotated[
        Optional[List[AlertMessageTypeParameter]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Message type (alert, update, cancel)"""

    event: Annotated[
        Optional[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Event name"""

    code: Annotated[
        Optional[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Event code"""

    area: Annotated[
        Optional[List[AreaCode]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""State/territory code or marine area code
    This parameter is incompatible with the following parameters: point, region, region_type, zone

    """

    point: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Point (latitude,longitude)
    This parameter is incompatible with the following parameters: area, region, region_type, zone

    """

    region: Annotated[
        Optional[List[MarineRegionCode]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Marine region code
    This parameter is incompatible with the following parameters: area, point, region_type, zone

    """

    region_type: Annotated[
        Optional[AlertRegionType],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Region type (land or marine)
    This parameter is incompatible with the following parameters: area, point, region, zone

    """

    zone: Annotated[
        Optional[List[str]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Zone ID (forecast or county)
    This parameter is incompatible with the following parameters: area, point, region, region_type

    """

    urgency: Annotated[
        Optional[List[AlertUrgency]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Urgency (immediate, expected, future, past, unknown)"""

    severity: Annotated[
        Optional[List[AlertSeverity]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Severity (extreme, severe, moderate, minor, unknown)"""

    certainty: Annotated[
        Optional[List[AlertCertainty]],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=False)),
    ] = None
    r"""Certainty (observed, likely, possible, unlikely, unknown)"""

    limit: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = 500
    r"""Limit"""

    cursor: Annotated[
        Optional[str],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Pagination cursor"""


AlertsQueryResponseResultTypedDict = TypeAliasType(
    "AlertsQueryResponseResultTypedDict",
    Union[
        AlertCollectionJSONLdTypedDict,
        AlertCollectionGeoJSONTypedDict,
        ProblemDetailTypedDict,
        bytes,
    ],
)


AlertsQueryResponseResult = TypeAliasType(
    "AlertsQueryResponseResult",
    Union[AlertCollectionJSONLd, AlertCollectionGeoJSON, ProblemDetail, bytes],
)


class AlertsQueryResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: AlertsQueryResponseResultTypedDict


class AlertsQueryResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: AlertsQueryResponseResult
