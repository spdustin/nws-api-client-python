"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .jsonldcontext_union import JSONLdContextUnion, JSONLdContextUnionTypedDict
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from nws_api_client.types import BaseModel
import pydantic
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


class ListTermsGlossaryTypedDict(TypedDict):
    definition: NotRequired[str]
    r"""A definition for the term"""
    term: NotRequired[str]
    r"""The term being defined"""


class ListTermsGlossary(BaseModel):
    definition: Optional[str] = None
    r"""A definition for the term"""

    term: Optional[str] = None
    r"""The term being defined"""


class ListTermsResponseBodyTypedDict(TypedDict):
    r"""A set of glossary terms"""

    at_context: NotRequired[JSONLdContextUnionTypedDict]
    glossary: NotRequired[List[ListTermsGlossaryTypedDict]]
    r"""A list of glossary terms"""


class ListTermsResponseBody(BaseModel):
    r"""A set of glossary terms"""

    at_context: Annotated[
        Optional[JSONLdContextUnion], pydantic.Field(alias="@context")
    ] = None

    glossary: Optional[List[ListTermsGlossary]] = None
    r"""A list of glossary terms"""


ListTermsResponseResultTypedDict = TypeAliasType(
    "ListTermsResponseResultTypedDict",
    Union[ListTermsResponseBodyTypedDict, ProblemDetailTypedDict],
)


ListTermsResponseResult = TypeAliasType(
    "ListTermsResponseResult", Union[ListTermsResponseBody, ProblemDetail]
)


class ListTermsResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: ListTermsResponseResultTypedDict


class ListTermsResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: ListTermsResponseResult
