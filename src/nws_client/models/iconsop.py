"""Code generated by Speakeasy (https://speakeasy.com). DO NOT EDIT."""

from __future__ import annotations
from .problemdetail import ProblemDetail, ProblemDetailTypedDict
from .sizes import Sizes
import httpx
from nws_client.types import BaseModel
from nws_client.utils import FieldMetadata, PathParamMetadata, QueryParamMetadata
import pydantic
from typing import Dict, List, Optional, Union
from typing_extensions import Annotated, NotRequired, TypeAliasType, TypedDict


IconsSizeTypedDict = TypeAliasType("IconsSizeTypedDict", Union[Sizes, int])
r"""Font size"""


IconsSize = TypeAliasType("IconsSize", Union[Sizes, int])
r"""Font size"""


class IconsRequestTypedDict(TypedDict):
    set: str
    r"""."""
    time_of_day: str
    r"""."""
    first: str
    r"""."""
    size: NotRequired[IconsSizeTypedDict]
    r"""Font size"""
    fontsize: NotRequired[int]
    r"""Font size"""


class IconsRequest(BaseModel):
    set: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""."""

    time_of_day: Annotated[
        str,
        pydantic.Field(alias="timeOfDay"),
        FieldMetadata(path=PathParamMetadata(style="simple", explode=False)),
    ]
    r"""."""

    first: Annotated[
        str, FieldMetadata(path=PathParamMetadata(style="simple", explode=False))
    ]
    r"""."""

    size: Annotated[
        Optional[IconsSize],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Font size"""

    fontsize: Annotated[
        Optional[int],
        FieldMetadata(query=QueryParamMetadata(style="form", explode=True)),
    ] = None
    r"""Font size"""


IconsResponseResultTypedDict = TypeAliasType(
    "IconsResponseResultTypedDict", Union[ProblemDetailTypedDict, httpx.Response]
)


IconsResponseResult = TypeAliasType(
    "IconsResponseResult", Union[ProblemDetail, httpx.Response]
)


class IconsResponseTypedDict(TypedDict):
    headers: Dict[str, List[str]]
    result: IconsResponseResultTypedDict


class IconsResponse(BaseModel):
    headers: Dict[str, List[str]]

    result: IconsResponseResult
